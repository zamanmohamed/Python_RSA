{"ast":null,"code":"var BigInteger = require('../libs/jsbn.js');\n\nvar schemes = require('../schemes/schemes.js');\n\nmodule.exports = function (keyPair, options) {\n  var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);\n  return {\n    encrypt: function (buffer, usePrivate) {\n      var m, c;\n\n      if (usePrivate) {\n        /* Type 1: zeros padding for private key encrypt */\n        m = new BigInteger(pkcs1Scheme.encPad(buffer, {\n          type: 1\n        }));\n        c = keyPair.$doPrivate(m);\n      } else {\n        m = new BigInteger(keyPair.encryptionScheme.encPad(buffer));\n        c = keyPair.$doPublic(m);\n      }\n\n      return c.toBuffer(keyPair.encryptedDataLength);\n    },\n    decrypt: function (buffer, usePublic) {\n      var m,\n          c = new BigInteger(buffer);\n\n      if (usePublic) {\n        m = keyPair.$doPublic(c);\n        /* Type 1: zeros padding for private key decrypt */\n\n        return pkcs1Scheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength), {\n          type: 1\n        });\n      } else {\n        m = keyPair.$doPrivate(c);\n        return keyPair.encryptionScheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength));\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Zaman/zaman/RSA/front/node_modules/node-rsa/src/encryptEngines/js.js"],"names":["BigInteger","require","schemes","module","exports","keyPair","options","pkcs1Scheme","pkcs1","makeScheme","encrypt","buffer","usePrivate","m","c","encPad","type","$doPrivate","encryptionScheme","$doPublic","toBuffer","encryptedDataLength","decrypt","usePublic","encUnPad"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,uBAAD,CAArB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AACzC,MAAIC,WAAW,GAAGL,OAAO,CAACM,KAAR,CAAcC,UAAd,CAAyBJ,OAAzB,EAAkCC,OAAlC,CAAlB;AAEA,SAAO;AACHI,IAAAA,OAAO,EAAE,UAAUC,MAAV,EAAkBC,UAAlB,EAA8B;AACnC,UAAIC,CAAJ,EAAOC,CAAP;;AACA,UAAIF,UAAJ,EAAgB;AACZ;AACAC,QAAAA,CAAC,GAAG,IAAIb,UAAJ,CAAeO,WAAW,CAACQ,MAAZ,CAAmBJ,MAAnB,EAA2B;AAACK,UAAAA,IAAI,EAAE;AAAP,SAA3B,CAAf,CAAJ;AACAF,QAAAA,CAAC,GAAGT,OAAO,CAACY,UAAR,CAAmBJ,CAAnB,CAAJ;AACH,OAJD,MAIO;AACHA,QAAAA,CAAC,GAAG,IAAIb,UAAJ,CAAeK,OAAO,CAACa,gBAAR,CAAyBH,MAAzB,CAAgCJ,MAAhC,CAAf,CAAJ;AACAG,QAAAA,CAAC,GAAGT,OAAO,CAACc,SAAR,CAAkBN,CAAlB,CAAJ;AACH;;AACD,aAAOC,CAAC,CAACM,QAAF,CAAWf,OAAO,CAACgB,mBAAnB,CAAP;AACH,KAZE;AAcHC,IAAAA,OAAO,EAAE,UAAUX,MAAV,EAAkBY,SAAlB,EAA6B;AAClC,UAAIV,CAAJ;AAAA,UAAOC,CAAC,GAAG,IAAId,UAAJ,CAAeW,MAAf,CAAX;;AAEA,UAAIY,SAAJ,EAAe;AACXV,QAAAA,CAAC,GAAGR,OAAO,CAACc,SAAR,CAAkBL,CAAlB,CAAJ;AACA;;AACA,eAAOP,WAAW,CAACiB,QAAZ,CAAqBX,CAAC,CAACO,QAAF,CAAWf,OAAO,CAACgB,mBAAnB,CAArB,EAA8D;AAACL,UAAAA,IAAI,EAAE;AAAP,SAA9D,CAAP;AACH,OAJD,MAIO;AACHH,QAAAA,CAAC,GAAGR,OAAO,CAACY,UAAR,CAAmBH,CAAnB,CAAJ;AACA,eAAOT,OAAO,CAACa,gBAAR,CAAyBM,QAAzB,CAAkCX,CAAC,CAACO,QAAF,CAAWf,OAAO,CAACgB,mBAAnB,CAAlC,CAAP;AACH;AACJ;AAzBE,GAAP;AA2BH,CA9BD","sourcesContent":["var BigInteger = require('../libs/jsbn.js');\r\nvar schemes = require('../schemes/schemes.js');\r\n\r\nmodule.exports = function (keyPair, options) {\r\n    var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);\r\n\r\n    return {\r\n        encrypt: function (buffer, usePrivate) {\r\n            var m, c;\r\n            if (usePrivate) {\r\n                /* Type 1: zeros padding for private key encrypt */\r\n                m = new BigInteger(pkcs1Scheme.encPad(buffer, {type: 1}));\r\n                c = keyPair.$doPrivate(m);\r\n            } else {\r\n                m = new BigInteger(keyPair.encryptionScheme.encPad(buffer));\r\n                c = keyPair.$doPublic(m);\r\n            }\r\n            return c.toBuffer(keyPair.encryptedDataLength);\r\n        },\r\n\r\n        decrypt: function (buffer, usePublic) {\r\n            var m, c = new BigInteger(buffer);\r\n\r\n            if (usePublic) {\r\n                m = keyPair.$doPublic(c);\r\n                /* Type 1: zeros padding for private key decrypt */\r\n                return pkcs1Scheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength), {type: 1});\r\n            } else {\r\n                m = keyPair.$doPrivate(c);\r\n                return keyPair.encryptionScheme.encUnPad(m.toBuffer(keyPair.encryptedDataLength));\r\n            }\r\n        }\r\n    };\r\n};"]},"metadata":{},"sourceType":"script"}