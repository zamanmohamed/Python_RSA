{"ast":null,"code":"/*\n * RSA Encryption / Decryption with PKCS1 v2 Padding.\n * \n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, \n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY \n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  \n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n\n/*\n * Node.js adaptation\n * long message support implementation\n * signing/verifying\n *\n * 2014 rzcoder\n */\nvar _ = require('../utils')._;\n\nvar crypt = require('crypto');\n\nvar BigInteger = require('./jsbn.js');\n\nvar utils = require('../utils.js');\n\nvar schemes = require('../schemes/schemes.js');\n\nvar encryptEngines = require('../encryptEngines/encryptEngines.js');\n\nexports.BigInteger = BigInteger;\n\nmodule.exports.Key = function () {\n  /**\n   * RSA key constructor\n   *\n   * n - modulus\n   * e - publicExponent\n   * d - privateExponent\n   * p - prime1\n   * q - prime2\n   * dmp1 - exponent1 -- d mod (p1)\n   * dmq1 - exponent2 -- d mod (q-1)\n   * coeff - coefficient -- (inverse of q) mod p\n   */\n  function RSAKey() {\n    this.n = null;\n    this.e = 0;\n    this.d = null;\n    this.p = null;\n    this.q = null;\n    this.dmp1 = null;\n    this.dmq1 = null;\n    this.coeff = null;\n  }\n\n  RSAKey.prototype.setOptions = function (options) {\n    var signingSchemeProvider = schemes[options.signingScheme];\n    var encryptionSchemeProvider = schemes[options.encryptionScheme];\n\n    if (signingSchemeProvider === encryptionSchemeProvider) {\n      this.signingScheme = this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);\n    } else {\n      this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);\n      this.signingScheme = signingSchemeProvider.makeScheme(this, options);\n    }\n\n    this.encryptEngine = encryptEngines.getEngine(this, options);\n  };\n  /**\n   * Generate a new random private key B bits long, using public expt E\n   * @param B\n   * @param E\n   */\n\n\n  RSAKey.prototype.generate = function (B, E) {\n    var qs = B >> 1;\n    this.e = parseInt(E, 16);\n    var ee = new BigInteger(E, 16);\n\n    while (true) {\n      while (true) {\n        this.p = new BigInteger(B - qs, 1);\n        if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.p.isProbablePrime(10)) break;\n      }\n\n      while (true) {\n        this.q = new BigInteger(qs, 1);\n        if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.q.isProbablePrime(10)) break;\n      }\n\n      if (this.p.compareTo(this.q) <= 0) {\n        var t = this.p;\n        this.p = this.q;\n        this.q = t;\n      }\n\n      var p1 = this.p.subtract(BigInteger.ONE);\n      var q1 = this.q.subtract(BigInteger.ONE);\n      var phi = p1.multiply(q1);\n\n      if (phi.gcd(ee).compareTo(BigInteger.ONE) === 0) {\n        this.n = this.p.multiply(this.q);\n\n        if (this.n.bitLength() < B) {\n          continue;\n        }\n\n        this.d = ee.modInverse(phi);\n        this.dmp1 = this.d.mod(p1);\n        this.dmq1 = this.d.mod(q1);\n        this.coeff = this.q.modInverse(this.p);\n        break;\n      }\n    }\n\n    this.$$recalculateCache();\n  };\n  /**\n   * Set the private key fields N, e, d and CRT params from buffers\n   *\n   * @param N\n   * @param E\n   * @param D\n   * @param P\n   * @param Q\n   * @param DP\n   * @param DQ\n   * @param C\n   */\n\n\n  RSAKey.prototype.setPrivate = function (N, E, D, P, Q, DP, DQ, C) {\n    if (N && E && D && N.length > 0 && (_.isNumber(E) || E.length > 0) && D.length > 0) {\n      this.n = new BigInteger(N);\n      this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);\n      this.d = new BigInteger(D);\n\n      if (P && Q && DP && DQ && C) {\n        this.p = new BigInteger(P);\n        this.q = new BigInteger(Q);\n        this.dmp1 = new BigInteger(DP);\n        this.dmq1 = new BigInteger(DQ);\n        this.coeff = new BigInteger(C);\n      } else {// TODO: re-calculate any missing CRT params\n      }\n\n      this.$$recalculateCache();\n    } else {\n      throw Error(\"Invalid RSA private key\");\n    }\n  };\n  /**\n   * Set the public key fields N and e from hex strings\n   * @param N\n   * @param E\n   */\n\n\n  RSAKey.prototype.setPublic = function (N, E) {\n    if (N && E && N.length > 0 && (_.isNumber(E) || E.length > 0)) {\n      this.n = new BigInteger(N);\n      this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);\n      this.$$recalculateCache();\n    } else {\n      throw Error(\"Invalid RSA public key\");\n    }\n  };\n  /**\n   * private\n   * Perform raw private operation on \"x\": return x^d (mod n)\n   *\n   * @param x\n   * @returns {*}\n   */\n\n\n  RSAKey.prototype.$doPrivate = function (x) {\n    if (this.p || this.q) {\n      return x.modPow(this.d, this.n);\n    } // TODO: re-calculate any missing CRT params\n\n\n    var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n    var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n\n    while (xp.compareTo(xq) < 0) {\n      xp = xp.add(this.p);\n    }\n\n    return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n  };\n  /**\n   * private\n   * Perform raw public operation on \"x\": return x^e (mod n)\n   *\n   * @param x\n   * @returns {*}\n   */\n\n\n  RSAKey.prototype.$doPublic = function (x) {\n    return x.modPowInt(this.e, this.n);\n  };\n  /**\n   * Return the PKCS#1 RSA encryption of buffer\n   * @param buffer {Buffer}\n   * @returns {Buffer}\n   */\n\n\n  RSAKey.prototype.encrypt = function (buffer, usePrivate) {\n    var buffers = [];\n    var results = [];\n    var bufferSize = buffer.length;\n    var buffersCount = Math.ceil(bufferSize / this.maxMessageLength) || 1; // total buffers count for encrypt\n\n    var dividedSize = Math.ceil(bufferSize / buffersCount || 1); // each buffer size\n\n    if (buffersCount == 1) {\n      buffers.push(buffer);\n    } else {\n      for (var bufNum = 0; bufNum < buffersCount; bufNum++) {\n        buffers.push(buffer.slice(bufNum * dividedSize, (bufNum + 1) * dividedSize));\n      }\n    }\n\n    for (var i = 0; i < buffers.length; i++) {\n      results.push(this.encryptEngine.encrypt(buffers[i], usePrivate));\n    }\n\n    return Buffer.concat(results);\n  };\n  /**\n   * Return the PKCS#1 RSA decryption of buffer\n   * @param buffer {Buffer}\n   * @returns {Buffer}\n   */\n\n\n  RSAKey.prototype.decrypt = function (buffer, usePublic) {\n    if (buffer.length % this.encryptedDataLength > 0) {\n      throw Error('Incorrect data or key');\n    }\n\n    var result = [];\n    var offset = 0;\n    var length = 0;\n    var buffersCount = buffer.length / this.encryptedDataLength;\n\n    for (var i = 0; i < buffersCount; i++) {\n      offset = i * this.encryptedDataLength;\n      length = offset + this.encryptedDataLength;\n      result.push(this.encryptEngine.decrypt(buffer.slice(offset, Math.min(length, buffer.length)), usePublic));\n    }\n\n    return Buffer.concat(result);\n  };\n\n  RSAKey.prototype.sign = function (buffer) {\n    return this.signingScheme.sign.apply(this.signingScheme, arguments);\n  };\n\n  RSAKey.prototype.verify = function (buffer, signature, signature_encoding) {\n    return this.signingScheme.verify.apply(this.signingScheme, arguments);\n  };\n  /**\n   * Check if key pair contains private key\n   */\n\n\n  RSAKey.prototype.isPrivate = function () {\n    return this.n && this.e && this.d && true || false;\n  };\n  /**\n   * Check if key pair contains public key\n   * @param strict {boolean} - public key only, return false if have private exponent\n   */\n\n\n  RSAKey.prototype.isPublic = function (strict) {\n    return this.n && this.e && !(strict && this.d) || false;\n  };\n\n  Object.defineProperty(RSAKey.prototype, 'keySize', {\n    get: function () {\n      return this.cache.keyBitLength;\n    }\n  });\n  Object.defineProperty(RSAKey.prototype, 'encryptedDataLength', {\n    get: function () {\n      return this.cache.keyByteLength;\n    }\n  });\n  Object.defineProperty(RSAKey.prototype, 'maxMessageLength', {\n    get: function () {\n      return this.encryptionScheme.maxMessageLength();\n    }\n  });\n  /**\n   * Caching key data\n   */\n\n  RSAKey.prototype.$$recalculateCache = function () {\n    this.cache = this.cache || {}; // Bit & byte length\n\n    this.cache.keyBitLength = this.n.bitLength();\n    this.cache.keyByteLength = this.cache.keyBitLength + 6 >> 3;\n  };\n\n  return RSAKey;\n}();","map":{"version":3,"sources":["C:/Users/Zaman/zaman/RSA/front/node_modules/node-rsa/src/libs/rsa.js"],"names":["_","require","crypt","BigInteger","utils","schemes","encryptEngines","exports","module","Key","RSAKey","n","e","d","p","q","dmp1","dmq1","coeff","prototype","setOptions","options","signingSchemeProvider","signingScheme","encryptionSchemeProvider","encryptionScheme","makeScheme","encryptEngine","getEngine","generate","B","E","qs","parseInt","ee","subtract","ONE","gcd","compareTo","isProbablePrime","t","p1","q1","phi","multiply","bitLength","modInverse","mod","$$recalculateCache","setPrivate","N","D","P","Q","DP","DQ","C","length","isNumber","get32IntFromBuffer","Error","setPublic","$doPrivate","x","modPow","xp","xq","add","$doPublic","modPowInt","encrypt","buffer","usePrivate","buffers","results","bufferSize","buffersCount","Math","ceil","maxMessageLength","dividedSize","push","bufNum","slice","i","Buffer","concat","decrypt","usePublic","encryptedDataLength","result","offset","min","sign","apply","arguments","verify","signature","signature_encoding","isPrivate","isPublic","strict","Object","defineProperty","get","cache","keyBitLength","keyByteLength"],"mappings":"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","sourcesContent":["/*\n * RSA Encryption / Decryption with PKCS1 v2 Padding.\n * \n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, \n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY \n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  \n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n\n/*\n * Node.js adaptation\n * long message support implementation\n * signing/verifying\n *\n * 2014 rzcoder\n */\n\nvar _ = require('../utils')._;\nvar crypt = require('crypto');\nvar BigInteger = require('./jsbn.js');\nvar utils = require('../utils.js');\nvar schemes = require('../schemes/schemes.js');\nvar encryptEngines = require('../encryptEngines/encryptEngines.js');\n\nexports.BigInteger = BigInteger;\nmodule.exports.Key = (function () {\n    /**\n     * RSA key constructor\n     *\n     * n - modulus\n     * e - publicExponent\n     * d - privateExponent\n     * p - prime1\n     * q - prime2\n     * dmp1 - exponent1 -- d mod (p1)\n     * dmq1 - exponent2 -- d mod (q-1)\n     * coeff - coefficient -- (inverse of q) mod p\n     */\n    function RSAKey() {\n        this.n = null;\n        this.e = 0;\n        this.d = null;\n        this.p = null;\n        this.q = null;\n        this.dmp1 = null;\n        this.dmq1 = null;\n        this.coeff = null;\n    }\n\n    RSAKey.prototype.setOptions = function (options) {\n        var signingSchemeProvider = schemes[options.signingScheme];\n        var encryptionSchemeProvider = schemes[options.encryptionScheme];\n\n        if (signingSchemeProvider === encryptionSchemeProvider) {\n            this.signingScheme = this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);\n        } else {\n            this.encryptionScheme = encryptionSchemeProvider.makeScheme(this, options);\n            this.signingScheme = signingSchemeProvider.makeScheme(this, options);\n        }\n\n        this.encryptEngine = encryptEngines.getEngine(this, options);\n    };\n\n    /**\n     * Generate a new random private key B bits long, using public expt E\n     * @param B\n     * @param E\n     */\n    RSAKey.prototype.generate = function (B, E) {\n        var qs = B >> 1;\n        this.e = parseInt(E, 16);\n        var ee = new BigInteger(E, 16);\n        while (true) {\n            while (true) {\n                this.p = new BigInteger(B - qs, 1);\n                if (this.p.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.p.isProbablePrime(10))\n                    break;\n            }\n            while (true) {\n                this.q = new BigInteger(qs, 1);\n                if (this.q.subtract(BigInteger.ONE).gcd(ee).compareTo(BigInteger.ONE) === 0 && this.q.isProbablePrime(10))\n                    break;\n            }\n            if (this.p.compareTo(this.q) <= 0) {\n                var t = this.p;\n                this.p = this.q;\n                this.q = t;\n            }\n            var p1 = this.p.subtract(BigInteger.ONE);\n            var q1 = this.q.subtract(BigInteger.ONE);\n            var phi = p1.multiply(q1);\n            if (phi.gcd(ee).compareTo(BigInteger.ONE) === 0) {\n                this.n = this.p.multiply(this.q);\n                if (this.n.bitLength() < B) {\n                    continue;\n                }\n                this.d = ee.modInverse(phi);\n                this.dmp1 = this.d.mod(p1);\n                this.dmq1 = this.d.mod(q1);\n                this.coeff = this.q.modInverse(this.p);\n                break;\n            }\n        }\n        this.$$recalculateCache();\n    };\n\n    /**\n     * Set the private key fields N, e, d and CRT params from buffers\n     *\n     * @param N\n     * @param E\n     * @param D\n     * @param P\n     * @param Q\n     * @param DP\n     * @param DQ\n     * @param C\n     */\n    RSAKey.prototype.setPrivate = function (N, E, D, P, Q, DP, DQ, C) {\n        if (N && E && D && N.length > 0 && (_.isNumber(E) || E.length > 0) && D.length > 0) {\n            this.n = new BigInteger(N);\n            this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);\n            this.d = new BigInteger(D);\n\n            if (P && Q && DP && DQ && C) {\n                this.p = new BigInteger(P);\n                this.q = new BigInteger(Q);\n                this.dmp1 = new BigInteger(DP);\n                this.dmq1 = new BigInteger(DQ);\n                this.coeff = new BigInteger(C);\n            } else {\n                // TODO: re-calculate any missing CRT params\n            }\n            this.$$recalculateCache();\n        } else {\n            throw Error(\"Invalid RSA private key\");\n        }\n    };\n\n    /**\n     * Set the public key fields N and e from hex strings\n     * @param N\n     * @param E\n     */\n    RSAKey.prototype.setPublic = function (N, E) {\n        if (N && E && N.length > 0 && (_.isNumber(E) || E.length > 0)) {\n            this.n = new BigInteger(N);\n            this.e = _.isNumber(E) ? E : utils.get32IntFromBuffer(E, 0);\n            this.$$recalculateCache();\n        } else {\n            throw Error(\"Invalid RSA public key\");\n        }\n    };\n\n    /**\n     * private\n     * Perform raw private operation on \"x\": return x^d (mod n)\n     *\n     * @param x\n     * @returns {*}\n     */\n    RSAKey.prototype.$doPrivate = function (x) {\n        if (this.p || this.q) {\n            return x.modPow(this.d, this.n);\n        }\n\n        // TODO: re-calculate any missing CRT params\n        var xp = x.mod(this.p).modPow(this.dmp1, this.p);\n        var xq = x.mod(this.q).modPow(this.dmq1, this.q);\n\n        while (xp.compareTo(xq) < 0) {\n            xp = xp.add(this.p);\n        }\n        return xp.subtract(xq).multiply(this.coeff).mod(this.p).multiply(this.q).add(xq);\n    };\n\n    /**\n     * private\n     * Perform raw public operation on \"x\": return x^e (mod n)\n     *\n     * @param x\n     * @returns {*}\n     */\n    RSAKey.prototype.$doPublic = function (x) {\n        return x.modPowInt(this.e, this.n);\n    };\n\n    /**\n     * Return the PKCS#1 RSA encryption of buffer\n     * @param buffer {Buffer}\n     * @returns {Buffer}\n     */\n    RSAKey.prototype.encrypt = function (buffer, usePrivate) {\n        var buffers = [];\n        var results = [];\n        var bufferSize = buffer.length;\n        var buffersCount = Math.ceil(bufferSize / this.maxMessageLength) || 1; // total buffers count for encrypt\n        var dividedSize = Math.ceil(bufferSize / buffersCount || 1); // each buffer size\n\n        if (buffersCount == 1) {\n            buffers.push(buffer);\n        } else {\n            for (var bufNum = 0; bufNum < buffersCount; bufNum++) {\n                buffers.push(buffer.slice(bufNum * dividedSize, (bufNum + 1) * dividedSize));\n            }\n        }\n\n        for (var i = 0; i < buffers.length; i++) {\n            results.push(this.encryptEngine.encrypt(buffers[i], usePrivate));\n        }\n\n        return Buffer.concat(results);\n    };\n\n    /**\n     * Return the PKCS#1 RSA decryption of buffer\n     * @param buffer {Buffer}\n     * @returns {Buffer}\n     */\n    RSAKey.prototype.decrypt = function (buffer, usePublic) {\n        if (buffer.length % this.encryptedDataLength > 0) {\n            throw Error('Incorrect data or key');\n        }\n\n        var result = [];\n        var offset = 0;\n        var length = 0;\n        var buffersCount = buffer.length / this.encryptedDataLength;\n\n        for (var i = 0; i < buffersCount; i++) {\n            offset = i * this.encryptedDataLength;\n            length = offset + this.encryptedDataLength;\n            result.push(this.encryptEngine.decrypt(buffer.slice(offset, Math.min(length, buffer.length)), usePublic));\n        }\n\n        return Buffer.concat(result);\n    };\n\n    RSAKey.prototype.sign = function (buffer) {\n        return this.signingScheme.sign.apply(this.signingScheme, arguments);\n    };\n\n    RSAKey.prototype.verify = function (buffer, signature, signature_encoding) {\n        return this.signingScheme.verify.apply(this.signingScheme, arguments);\n    };\n\n    /**\n     * Check if key pair contains private key\n     */\n    RSAKey.prototype.isPrivate = function () {\n        return this.n && this.e && this.d && true || false;\n    };\n\n    /**\n     * Check if key pair contains public key\n     * @param strict {boolean} - public key only, return false if have private exponent\n     */\n    RSAKey.prototype.isPublic = function (strict) {\n        return this.n && this.e && !(strict && this.d) || false;\n    };\n\n    Object.defineProperty(RSAKey.prototype, 'keySize', {\n        get: function () {\n            return this.cache.keyBitLength;\n        }\n    });\n\n    Object.defineProperty(RSAKey.prototype, 'encryptedDataLength', {\n        get: function () {\n            return this.cache.keyByteLength;\n        }\n    });\n\n    Object.defineProperty(RSAKey.prototype, 'maxMessageLength', {\n        get: function () {\n            return this.encryptionScheme.maxMessageLength();\n        }\n    });\n\n    /**\n     * Caching key data\n     */\n    RSAKey.prototype.$$recalculateCache = function () {\n        this.cache = this.cache || {};\n        // Bit & byte length\n        this.cache.keyBitLength = this.n.bitLength();\n        this.cache.keyByteLength = (this.cache.keyBitLength + 6) >> 3;\n    };\n\n    return RSAKey;\n})();\n\n"]},"metadata":{},"sourceType":"script"}