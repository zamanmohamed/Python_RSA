{"ast":null,"code":"/*\r\n * Basic JavaScript BN library - subset useful for RSA encryption.\r\n * \r\n * Copyright (c) 2003-2005  Tom Wu\r\n * All Rights Reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, \r\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY \r\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  \r\n *\r\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\r\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\r\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\r\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\r\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n *\r\n * In addition, the following condition applies:\r\n *\r\n * All redistributions must retain an intact copy of this copyright notice\r\n * and disclaimer.\r\n */\n\n/*\r\n * Added Node.js Buffers support\r\n * 2014 rzcoder\r\n */\nvar crypt = require('crypto');\n\nvar _ = require('../utils')._; // Bits per digit\n\n\nvar dbits; // JavaScript engine analysis\n\nvar canary = 0xdeadbeefcafe;\nvar j_lm = (canary & 0xffffff) == 0xefcafe; // (public) Constructor\n\nfunction BigInteger(a, b) {\n  if (a != null) {\n    if (\"number\" == typeof a) {\n      this.fromNumber(a, b);\n    } else if (Buffer.isBuffer(a)) {\n      this.fromBuffer(a);\n    } else if (b == null && \"string\" != typeof a) {\n      this.fromByteArray(a);\n    } else {\n      this.fromString(a, b);\n    }\n  }\n} // return new, unset BigInteger\n\n\nfunction nbi() {\n  return new BigInteger(null);\n} // am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n\n\nfunction am1(i, x, w, j, c, n) {\n  while (--n >= 0) {\n    var v = x * this[i++] + w[j] + c;\n    c = Math.floor(v / 0x4000000);\n    w[j++] = v & 0x3ffffff;\n  }\n\n  return c;\n} // am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n\n\nfunction am2(i, x, w, j, c, n) {\n  var xl = x & 0x7fff,\n      xh = x >> 15;\n\n  while (--n >= 0) {\n    var l = this[i] & 0x7fff;\n    var h = this[i++] >> 15;\n    var m = xh * l + h * xl;\n    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n    w[j++] = l & 0x3fffffff;\n  }\n\n  return c;\n} // Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\n\n\nfunction am3(i, x, w, j, c, n) {\n  var xl = x & 0x3fff,\n      xh = x >> 14;\n\n  while (--n >= 0) {\n    var l = this[i] & 0x3fff;\n    var h = this[i++] >> 14;\n    var m = xh * l + h * xl;\n    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n    c = (l >> 28) + (m >> 14) + xh * h;\n    w[j++] = l & 0xfffffff;\n  }\n\n  return c;\n} // We need to select the fastest one that works in this environment. \n//if (j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n//\tBigInteger.prototype.am = am2;\n//\tdbits = 30;\n//} else if (j_lm && (navigator.appName != \"Netscape\")) {\n//\tBigInteger.prototype.am = am1;\n//\tdbits = 26;\n//} else { // Mozilla/Netscape seems to prefer am3\n//\tBigInteger.prototype.am = am3;\n//\tdbits = 28;\n//}\n// For node.js, we pick am3 with max dbits to 28.\n\n\nBigInteger.prototype.am = am3;\ndbits = 28;\nBigInteger.prototype.DB = dbits;\nBigInteger.prototype.DM = (1 << dbits) - 1;\nBigInteger.prototype.DV = 1 << dbits;\nvar BI_FP = 52;\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\nBigInteger.prototype.F1 = BI_FP - dbits;\nBigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions\n\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\nvar BI_RC = new Array();\nvar rr, vv;\nrr = \"0\".charCodeAt(0);\n\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n\nrr = \"a\".charCodeAt(0);\n\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nrr = \"A\".charCodeAt(0);\n\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\nfunction int2char(n) {\n  return BI_RM.charAt(n);\n}\n\nfunction intAt(s, i) {\n  var c = BI_RC[s.charCodeAt(i)];\n  return c == null ? -1 : c;\n} // (protected) copy this to r\n\n\nfunction bnpCopyTo(r) {\n  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\n\n  r.t = this.t;\n  r.s = this.s;\n} // (protected) set from integer value x, -DV <= x < DV\n\n\nfunction bnpFromInt(x) {\n  this.t = 1;\n  this.s = x < 0 ? -1 : 0;\n  if (x > 0) this[0] = x;else if (x < -1) this[0] = x + DV;else this.t = 0;\n} // return bigint initialized to value\n\n\nfunction nbv(i) {\n  var r = nbi();\n  r.fromInt(i);\n  return r;\n} // (protected) set from string and radix\n\n\nfunction bnpFromString(data, radix, unsigned) {\n  var k;\n\n  switch (radix) {\n    case 2:\n      k = 1;\n      break;\n\n    case 4:\n      k = 2;\n      break;\n\n    case 8:\n      k = 3;\n      break;\n\n    case 16:\n      k = 4;\n      break;\n\n    case 32:\n      k = 5;\n      break;\n\n    case 256:\n      k = 8;\n      break;\n\n    default:\n      this.fromRadix(data, radix);\n      return;\n  }\n\n  this.t = 0;\n  this.s = 0;\n  var i = data.length;\n  var mi = false;\n  var sh = 0;\n\n  while (--i >= 0) {\n    var x = k == 8 ? data[i] & 0xff : intAt(data, i);\n\n    if (x < 0) {\n      if (data.charAt(i) == \"-\") mi = true;\n      continue;\n    }\n\n    mi = false;\n    if (sh === 0) this[this.t++] = x;else if (sh + k > this.DB) {\n      this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n      this[this.t++] = x >> this.DB - sh;\n    } else this[this.t - 1] |= x << sh;\n    sh += k;\n    if (sh >= this.DB) sh -= this.DB;\n  }\n\n  if (!unsigned && k == 8 && (data[0] & 0x80) != 0) {\n    this.s = -1;\n    if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;\n  }\n\n  this.clamp();\n  if (mi) BigInteger.ZERO.subTo(this, this);\n}\n\nfunction bnpFromByteArray(a, unsigned) {\n  this.fromString(a, 256, unsigned);\n}\n\nfunction bnpFromBuffer(a) {\n  this.fromString(a, 256, true);\n} // (protected) clamp off excess high words\n\n\nfunction bnpClamp() {\n  var c = this.s & this.DM;\n\n  while (this.t > 0 && this[this.t - 1] == c) --this.t;\n} // (public) return string representation in given radix\n\n\nfunction bnToString(b) {\n  if (this.s < 0) return \"-\" + this.negate().toString(b);\n  var k;\n  if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return this.toRadix(b);\n  var km = (1 << k) - 1,\n      d,\n      m = false,\n      r = \"\",\n      i = this.t;\n  var p = this.DB - i * this.DB % k;\n\n  if (i-- > 0) {\n    if (p < this.DB && (d = this[i] >> p) > 0) {\n      m = true;\n      r = int2char(d);\n    }\n\n    while (i >= 0) {\n      if (p < k) {\n        d = (this[i] & (1 << p) - 1) << k - p;\n        d |= this[--i] >> (p += this.DB - k);\n      } else {\n        d = this[i] >> (p -= k) & km;\n\n        if (p <= 0) {\n          p += this.DB;\n          --i;\n        }\n      }\n\n      if (d > 0) m = true;\n      if (m) r += int2char(d);\n    }\n  }\n\n  return m ? r : \"0\";\n} // (public) -this\n\n\nfunction bnNegate() {\n  var r = nbi();\n  BigInteger.ZERO.subTo(this, r);\n  return r;\n} // (public) |this|\n\n\nfunction bnAbs() {\n  return this.s < 0 ? this.negate() : this;\n} // (public) return + if this > a, - if this < a, 0 if equal\n\n\nfunction bnCompareTo(a) {\n  var r = this.s - a.s;\n  if (r != 0) return r;\n  var i = this.t;\n  r = i - a.t;\n  if (r != 0) return this.s < 0 ? -r : r;\n\n  while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;\n\n  return 0;\n} // returns bit length of the integer x\n\n\nfunction nbits(x) {\n  var r = 1,\n      t;\n\n  if ((t = x >>> 16) != 0) {\n    x = t;\n    r += 16;\n  }\n\n  if ((t = x >> 8) != 0) {\n    x = t;\n    r += 8;\n  }\n\n  if ((t = x >> 4) != 0) {\n    x = t;\n    r += 4;\n  }\n\n  if ((t = x >> 2) != 0) {\n    x = t;\n    r += 2;\n  }\n\n  if ((t = x >> 1) != 0) {\n    x = t;\n    r += 1;\n  }\n\n  return r;\n} // (public) return the number of bits in \"this\"\n\n\nfunction bnBitLength() {\n  if (this.t <= 0) return 0;\n  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n} // (protected) r = this << n*DB\n\n\nfunction bnpDLShiftTo(n, r) {\n  var i;\n\n  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\n\n  for (i = n - 1; i >= 0; --i) r[i] = 0;\n\n  r.t = this.t + n;\n  r.s = this.s;\n} // (protected) r = this >> n*DB\n\n\nfunction bnpDRShiftTo(n, r) {\n  for (var i = n; i < this.t; ++i) r[i - n] = this[i];\n\n  r.t = Math.max(this.t - n, 0);\n  r.s = this.s;\n} // (protected) r = this << n\n\n\nfunction bnpLShiftTo(n, r) {\n  var bs = n % this.DB;\n  var cbs = this.DB - bs;\n  var bm = (1 << cbs) - 1;\n  var ds = Math.floor(n / this.DB),\n      c = this.s << bs & this.DM,\n      i;\n\n  for (i = this.t - 1; i >= 0; --i) {\n    r[i + ds + 1] = this[i] >> cbs | c;\n    c = (this[i] & bm) << bs;\n  }\n\n  for (i = ds - 1; i >= 0; --i) r[i] = 0;\n\n  r[ds] = c;\n  r.t = this.t + ds + 1;\n  r.s = this.s;\n  r.clamp();\n} // (protected) r = this >> n\n\n\nfunction bnpRShiftTo(n, r) {\n  r.s = this.s;\n  var ds = Math.floor(n / this.DB);\n\n  if (ds >= this.t) {\n    r.t = 0;\n    return;\n  }\n\n  var bs = n % this.DB;\n  var cbs = this.DB - bs;\n  var bm = (1 << bs) - 1;\n  r[0] = this[ds] >> bs;\n\n  for (var i = ds + 1; i < this.t; ++i) {\n    r[i - ds - 1] |= (this[i] & bm) << cbs;\n    r[i - ds] = this[i] >> bs;\n  }\n\n  if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n  r.t = this.t - ds;\n  r.clamp();\n} // (protected) r = this - a\n\n\nfunction bnpSubTo(a, r) {\n  var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n\n  while (i < m) {\n    c += this[i] - a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n\n  if (a.t < this.t) {\n    c -= a.s;\n\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c += this.s;\n  } else {\n    c += this.s;\n\n    while (i < a.t) {\n      c -= a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c -= a.s;\n  }\n\n  r.s = c < 0 ? -1 : 0;\n  if (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;\n  r.t = i;\n  r.clamp();\n} // (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\n\n\nfunction bnpMultiplyTo(a, r) {\n  var x = this.abs(),\n      y = a.abs();\n  var i = x.t;\n  r.t = i + y.t;\n\n  while (--i >= 0) r[i] = 0;\n\n  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n\n  r.s = 0;\n  r.clamp();\n  if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n} // (protected) r = this^2, r != this (HAC 14.16)\n\n\nfunction bnpSquareTo(r) {\n  var x = this.abs();\n  var i = r.t = 2 * x.t;\n\n  while (--i >= 0) r[i] = 0;\n\n  for (i = 0; i < x.t - 1; ++i) {\n    var c = x.am(i, x[i], r, 2 * i, 0, 1);\n\n    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n      r[i + x.t] -= x.DV;\n      r[i + x.t + 1] = 1;\n    }\n  }\n\n  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n  r.s = 0;\n  r.clamp();\n} // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\n\n\nfunction bnpDivRemTo(m, q, r) {\n  var pm = m.abs();\n  if (pm.t <= 0) return;\n  var pt = this.abs();\n\n  if (pt.t < pm.t) {\n    if (q != null) q.fromInt(0);\n    if (r != null) this.copyTo(r);\n    return;\n  }\n\n  if (r == null) r = nbi();\n  var y = nbi(),\n      ts = this.s,\n      ms = m.s;\n  var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n\n  if (nsh > 0) {\n    pm.lShiftTo(nsh, y);\n    pt.lShiftTo(nsh, r);\n  } else {\n    pm.copyTo(y);\n    pt.copyTo(r);\n  }\n\n  var ys = y.t;\n  var y0 = y[ys - 1];\n  if (y0 === 0) return;\n  var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n  var d1 = this.FV / yt,\n      d2 = (1 << this.F1) / yt,\n      e = 1 << this.F2;\n  var i = r.t,\n      j = i - ys,\n      t = q == null ? nbi() : q;\n  y.dlShiftTo(j, t);\n\n  if (r.compareTo(t) >= 0) {\n    r[r.t++] = 1;\n    r.subTo(t, r);\n  }\n\n  BigInteger.ONE.dlShiftTo(ys, t);\n  t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n\n  while (y.t < ys) y[y.t++] = 0;\n\n  while (--j >= 0) {\n    // Estimate quotient digit\n    var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n\n    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n      // Try it out\n      y.dlShiftTo(j, t);\n      r.subTo(t, r);\n\n      while (r[i] < --qd) r.subTo(t, r);\n    }\n  }\n\n  if (q != null) {\n    r.drShiftTo(ys, q);\n    if (ts != ms) BigInteger.ZERO.subTo(q, q);\n  }\n\n  r.t = ys;\n  r.clamp();\n  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n\n  if (ts < 0) BigInteger.ZERO.subTo(r, r);\n} // (public) this mod a\n\n\nfunction bnMod(a) {\n  var r = nbi();\n  this.abs().divRemTo(a, null, r);\n  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n  return r;\n} // Modular reduction using \"classic\" algorithm\n\n\nfunction Classic(m) {\n  this.m = m;\n}\n\nfunction cConvert(x) {\n  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);else return x;\n}\n\nfunction cRevert(x) {\n  return x;\n}\n\nfunction cReduce(x) {\n  x.divRemTo(this.m, null, x);\n}\n\nfunction cMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\n\nfunction cSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n}\n\nClassic.prototype.convert = cConvert;\nClassic.prototype.revert = cRevert;\nClassic.prototype.reduce = cReduce;\nClassic.prototype.mulTo = cMulTo;\nClassic.prototype.sqrTo = cSqrTo; // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\n\nfunction bnpInvDigit() {\n  if (this.t < 1) return 0;\n  var x = this[0];\n  if ((x & 1) === 0) return 0;\n  var y = x & 3; // y == 1/x mod 2^2\n\n  y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4\n\n  y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8\n\n  y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly;\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n\n  y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n\n  return y > 0 ? this.DV - y : -y;\n} // Montgomery reduction\n\n\nfunction Montgomery(m) {\n  this.m = m;\n  this.mp = m.invDigit();\n  this.mpl = this.mp & 0x7fff;\n  this.mph = this.mp >> 15;\n  this.um = (1 << m.DB - 15) - 1;\n  this.mt2 = 2 * m.t;\n} // xR mod m\n\n\nfunction montConvert(x) {\n  var r = nbi();\n  x.abs().dlShiftTo(this.m.t, r);\n  r.divRemTo(this.m, null, r);\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n  return r;\n} // x/R mod m\n\n\nfunction montRevert(x) {\n  var r = nbi();\n  x.copyTo(r);\n  this.reduce(r);\n  return r;\n} // x = x/R mod m (HAC 14.32)\n\n\nfunction montReduce(x) {\n  while (x.t <= this.mt2) // pad x so am has enough room later\n  x[x.t++] = 0;\n\n  for (var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i] & 0x7fff;\n    var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call\n\n    j = i + this.m.t;\n    x[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry\n\n    while (x[j] >= x.DV) {\n      x[j] -= x.DV;\n      x[++j]++;\n    }\n  }\n\n  x.clamp();\n  x.drShiftTo(this.m.t, x);\n  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n} // r = \"x^2/R mod m\"; x != r\n\n\nfunction montSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n} // r = \"xy/R mod m\"; x,y != r\n\n\nfunction montMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\n\nMontgomery.prototype.convert = montConvert;\nMontgomery.prototype.revert = montRevert;\nMontgomery.prototype.reduce = montReduce;\nMontgomery.prototype.mulTo = montMulTo;\nMontgomery.prototype.sqrTo = montSqrTo; // (protected) true iff this is even\n\nfunction bnpIsEven() {\n  return (this.t > 0 ? this[0] & 1 : this.s) === 0;\n} // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n\n\nfunction bnpExp(e, z) {\n  if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n  var r = nbi(),\n      r2 = nbi(),\n      g = z.convert(this),\n      i = nbits(e) - 1;\n  g.copyTo(r);\n\n  while (--i >= 0) {\n    z.sqrTo(r, r2);\n    if ((e & 1 << i) > 0) z.mulTo(r2, g, r);else {\n      var t = r;\n      r = r2;\n      r2 = t;\n    }\n  }\n\n  return z.revert(r);\n} // (public) this^e % m, 0 <= e < 2^32\n\n\nfunction bnModPowInt(e, m) {\n  var z;\n  if (e < 256 || m.isEven()) z = new Classic(m);else z = new Montgomery(m);\n  return this.exp(e, z);\n} // Copyright (c) 2005-2009  Tom Wu\n// All Rights Reserved.\n// See \"LICENSE\" for details.\n// Extended JavaScript BN functions, required for RSA private ops.\n// Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n// Version 1.2: square() API, isProbablePrime fix\n//(public)\n\n\nfunction bnClone() {\n  var r = nbi();\n  this.copyTo(r);\n  return r;\n} //(public) return value as integer\n\n\nfunction bnIntValue() {\n  if (this.s < 0) {\n    if (this.t == 1) return this[0] - this.DV;else if (this.t === 0) return -1;\n  } else if (this.t == 1) return this[0];else if (this.t === 0) return 0; // assumes 16 < DB < 32\n\n\n  return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];\n} //(public) return value as byte\n\n\nfunction bnByteValue() {\n  return this.t == 0 ? this.s : this[0] << 24 >> 24;\n} //(public) return value as short (assumes DB>=16)\n\n\nfunction bnShortValue() {\n  return this.t == 0 ? this.s : this[0] << 16 >> 16;\n} //(protected) return x s.t. r^x < DV\n\n\nfunction bnpChunkSize(r) {\n  return Math.floor(Math.LN2 * this.DB / Math.log(r));\n} //(public) 0 if this === 0, 1 if this > 0\n\n\nfunction bnSigNum() {\n  if (this.s < 0) return -1;else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;else return 1;\n} //(protected) convert to radix string\n\n\nfunction bnpToRadix(b) {\n  if (b == null) b = 10;\n  if (this.signum() === 0 || b < 2 || b > 36) return \"0\";\n  var cs = this.chunkSize(b);\n  var a = Math.pow(b, cs);\n  var d = nbv(a),\n      y = nbi(),\n      z = nbi(),\n      r = \"\";\n  this.divRemTo(d, y, z);\n\n  while (y.signum() > 0) {\n    r = (a + z.intValue()).toString(b).substr(1) + r;\n    y.divRemTo(d, y, z);\n  }\n\n  return z.intValue().toString(b) + r;\n} //(protected) convert from radix string\n\n\nfunction bnpFromRadix(s, b) {\n  this.fromInt(0);\n  if (b == null) b = 10;\n  var cs = this.chunkSize(b);\n  var d = Math.pow(b, cs),\n      mi = false,\n      j = 0,\n      w = 0;\n\n  for (var i = 0; i < s.length; ++i) {\n    var x = intAt(s, i);\n\n    if (x < 0) {\n      if (s.charAt(i) == \"-\" && this.signum() === 0) mi = true;\n      continue;\n    }\n\n    w = b * w + x;\n\n    if (++j >= cs) {\n      this.dMultiply(d);\n      this.dAddOffset(w, 0);\n      j = 0;\n      w = 0;\n    }\n  }\n\n  if (j > 0) {\n    this.dMultiply(Math.pow(b, j));\n    this.dAddOffset(w, 0);\n  }\n\n  if (mi) BigInteger.ZERO.subTo(this, this);\n} //(protected) alternate constructor\n\n\nfunction bnpFromNumber(a, b) {\n  if (\"number\" == typeof b) {\n    // new BigInteger(int,int,RNG)\n    if (a < 2) this.fromInt(1);else {\n      this.fromNumber(a);\n      if (!this.testBit(a - 1)) // force MSB set\n        this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n      if (this.isEven()) this.dAddOffset(1, 0); // force odd\n\n      while (!this.isProbablePrime(b)) {\n        this.dAddOffset(2, 0);\n        if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n      }\n    }\n  } else {\n    // new BigInteger(int,RNG)\n    var x = crypt.randomBytes((a >> 3) + 1);\n    var t = a & 7;\n    if (t > 0) x[0] &= (1 << t) - 1;else x[0] = 0;\n    this.fromByteArray(x);\n  }\n} //(public) convert to bigendian byte array\n\n\nfunction bnToByteArray() {\n  var i = this.t,\n      r = new Array();\n  r[0] = this.s;\n  var p = this.DB - i * this.DB % 8,\n      d,\n      k = 0;\n\n  if (i-- > 0) {\n    if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;\n\n    while (i >= 0) {\n      if (p < 8) {\n        d = (this[i] & (1 << p) - 1) << 8 - p;\n        d |= this[--i] >> (p += this.DB - 8);\n      } else {\n        d = this[i] >> (p -= 8) & 0xff;\n\n        if (p <= 0) {\n          p += this.DB;\n          --i;\n        }\n      }\n\n      if ((d & 0x80) != 0) d |= -256;\n      if (k === 0 && (this.s & 0x80) != (d & 0x80)) ++k;\n      if (k > 0 || d != this.s) r[k++] = d;\n    }\n  }\n\n  return r;\n}\n/**\r\n * return Buffer object\r\n * @param trim {boolean} slice buffer if first element == 0\r\n * @returns {Buffer}\r\n */\n\n\nfunction bnToBuffer(trimOrSize) {\n  var res = Buffer.from(this.toByteArray());\n\n  if (trimOrSize === true && res[0] === 0) {\n    res = res.slice(1);\n  } else if (_.isNumber(trimOrSize)) {\n    if (res.length > trimOrSize) {\n      for (var i = 0; i < res.length - trimOrSize; i++) {\n        if (res[i] !== 0) {\n          return null;\n        }\n      }\n\n      return res.slice(res.length - trimOrSize);\n    } else if (res.length < trimOrSize) {\n      var padded = Buffer.alloc(trimOrSize);\n      padded.fill(0, 0, trimOrSize - res.length);\n      res.copy(padded, trimOrSize - res.length);\n      return padded;\n    }\n  }\n\n  return res;\n}\n\nfunction bnEquals(a) {\n  return this.compareTo(a) == 0;\n}\n\nfunction bnMin(a) {\n  return this.compareTo(a) < 0 ? this : a;\n}\n\nfunction bnMax(a) {\n  return this.compareTo(a) > 0 ? this : a;\n} //(protected) r = this op a (bitwise)\n\n\nfunction bnpBitwiseTo(a, op, r) {\n  var i,\n      f,\n      m = Math.min(a.t, this.t);\n\n  for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);\n\n  if (a.t < this.t) {\n    f = a.s & this.DM;\n\n    for (i = m; i < this.t; ++i) r[i] = op(this[i], f);\n\n    r.t = this.t;\n  } else {\n    f = this.s & this.DM;\n\n    for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\n\n    r.t = a.t;\n  }\n\n  r.s = op(this.s, a.s);\n  r.clamp();\n} //(public) this & a\n\n\nfunction op_and(x, y) {\n  return x & y;\n}\n\nfunction bnAnd(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_and, r);\n  return r;\n} //(public) this | a\n\n\nfunction op_or(x, y) {\n  return x | y;\n}\n\nfunction bnOr(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_or, r);\n  return r;\n} //(public) this ^ a\n\n\nfunction op_xor(x, y) {\n  return x ^ y;\n}\n\nfunction bnXor(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_xor, r);\n  return r;\n} //(public) this & ~a\n\n\nfunction op_andnot(x, y) {\n  return x & ~y;\n}\n\nfunction bnAndNot(a) {\n  var r = nbi();\n  this.bitwiseTo(a, op_andnot, r);\n  return r;\n} //(public) ~this\n\n\nfunction bnNot() {\n  var r = nbi();\n\n  for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\n\n  r.t = this.t;\n  r.s = ~this.s;\n  return r;\n} //(public) this << n\n\n\nfunction bnShiftLeft(n) {\n  var r = nbi();\n  if (n < 0) this.rShiftTo(-n, r);else this.lShiftTo(n, r);\n  return r;\n} //(public) this >> n\n\n\nfunction bnShiftRight(n) {\n  var r = nbi();\n  if (n < 0) this.lShiftTo(-n, r);else this.rShiftTo(n, r);\n  return r;\n} //return index of lowest 1-bit in x, x < 2^31\n\n\nfunction lbit(x) {\n  if (x === 0) return -1;\n  var r = 0;\n\n  if ((x & 0xffff) === 0) {\n    x >>= 16;\n    r += 16;\n  }\n\n  if ((x & 0xff) === 0) {\n    x >>= 8;\n    r += 8;\n  }\n\n  if ((x & 0xf) === 0) {\n    x >>= 4;\n    r += 4;\n  }\n\n  if ((x & 3) === 0) {\n    x >>= 2;\n    r += 2;\n  }\n\n  if ((x & 1) === 0) ++r;\n  return r;\n} //(public) returns index of lowest 1-bit (or -1 if none)\n\n\nfunction bnGetLowestSetBit() {\n  for (var i = 0; i < this.t; ++i) if (this[i] != 0) return i * this.DB + lbit(this[i]);\n\n  if (this.s < 0) return this.t * this.DB;\n  return -1;\n} //return number of 1 bits in x\n\n\nfunction cbit(x) {\n  var r = 0;\n\n  while (x != 0) {\n    x &= x - 1;\n    ++r;\n  }\n\n  return r;\n} //(public) return number of set bits\n\n\nfunction bnBitCount() {\n  var r = 0,\n      x = this.s & this.DM;\n\n  for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);\n\n  return r;\n} //(public) true iff nth bit is set\n\n\nfunction bnTestBit(n) {\n  var j = Math.floor(n / this.DB);\n  if (j >= this.t) return this.s != 0;\n  return (this[j] & 1 << n % this.DB) != 0;\n} //(protected) this op (1<<n)\n\n\nfunction bnpChangeBit(n, op) {\n  var r = BigInteger.ONE.shiftLeft(n);\n  this.bitwiseTo(r, op, r);\n  return r;\n} //(public) this | (1<<n)\n\n\nfunction bnSetBit(n) {\n  return this.changeBit(n, op_or);\n} //(public) this & ~(1<<n)\n\n\nfunction bnClearBit(n) {\n  return this.changeBit(n, op_andnot);\n} //(public) this ^ (1<<n)\n\n\nfunction bnFlipBit(n) {\n  return this.changeBit(n, op_xor);\n} //(protected) r = this + a\n\n\nfunction bnpAddTo(a, r) {\n  var i = 0,\n      c = 0,\n      m = Math.min(a.t, this.t);\n\n  while (i < m) {\n    c += this[i] + a[i];\n    r[i++] = c & this.DM;\n    c >>= this.DB;\n  }\n\n  if (a.t < this.t) {\n    c += a.s;\n\n    while (i < this.t) {\n      c += this[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c += this.s;\n  } else {\n    c += this.s;\n\n    while (i < a.t) {\n      c += a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    c += a.s;\n  }\n\n  r.s = c < 0 ? -1 : 0;\n  if (c > 0) r[i++] = c;else if (c < -1) r[i++] = this.DV + c;\n  r.t = i;\n  r.clamp();\n} //(public) this + a\n\n\nfunction bnAdd(a) {\n  var r = nbi();\n  this.addTo(a, r);\n  return r;\n} //(public) this - a\n\n\nfunction bnSubtract(a) {\n  var r = nbi();\n  this.subTo(a, r);\n  return r;\n} //(public) this * a\n\n\nfunction bnMultiply(a) {\n  var r = nbi();\n  this.multiplyTo(a, r);\n  return r;\n} // (public) this^2\n\n\nfunction bnSquare() {\n  var r = nbi();\n  this.squareTo(r);\n  return r;\n} //(public) this / a\n\n\nfunction bnDivide(a) {\n  var r = nbi();\n  this.divRemTo(a, r, null);\n  return r;\n} //(public) this % a\n\n\nfunction bnRemainder(a) {\n  var r = nbi();\n  this.divRemTo(a, null, r);\n  return r;\n} //(public) [this/a,this%a]\n\n\nfunction bnDivideAndRemainder(a) {\n  var q = nbi(),\n      r = nbi();\n  this.divRemTo(a, q, r);\n  return new Array(q, r);\n} //(protected) this *= n, this >= 0, 1 < n < DV\n\n\nfunction bnpDMultiply(n) {\n  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n  ++this.t;\n  this.clamp();\n} //(protected) this += n << w words, this >= 0\n\n\nfunction bnpDAddOffset(n, w) {\n  if (n === 0) return;\n\n  while (this.t <= w) this[this.t++] = 0;\n\n  this[w] += n;\n\n  while (this[w] >= this.DV) {\n    this[w] -= this.DV;\n    if (++w >= this.t) this[this.t++] = 0;\n    ++this[w];\n  }\n} //A \"null\" reducer\n\n\nfunction NullExp() {}\n\nfunction nNop(x) {\n  return x;\n}\n\nfunction nMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n}\n\nfunction nSqrTo(x, r) {\n  x.squareTo(r);\n}\n\nNullExp.prototype.convert = nNop;\nNullExp.prototype.revert = nNop;\nNullExp.prototype.mulTo = nMulTo;\nNullExp.prototype.sqrTo = nSqrTo; //(public) this^e\n\nfunction bnPow(e) {\n  return this.exp(e, new NullExp());\n} //(protected) r = lower n words of \"this * a\", a.t <= n\n//\"this\" should be the larger one if appropriate.\n\n\nfunction bnpMultiplyLowerTo(a, n, r) {\n  var i = Math.min(this.t + a.t, n);\n  r.s = 0; // assumes a,this >= 0\n\n  r.t = i;\n\n  while (i > 0) r[--i] = 0;\n\n  var j;\n\n  for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n\n  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\n\n  r.clamp();\n} //(protected) r = \"this * a\" without lower n words, n > 0\n//\"this\" should be the larger one if appropriate.\n\n\nfunction bnpMultiplyUpperTo(a, n, r) {\n  --n;\n  var i = r.t = this.t + a.t - n;\n  r.s = 0; // assumes a,this >= 0\n\n  while (--i >= 0) r[i] = 0;\n\n  for (i = Math.max(n - this.t, 0); i < a.t; ++i) r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n\n  r.clamp();\n  r.drShiftTo(1, r);\n} //Barrett modular reduction\n\n\nfunction Barrett(m) {\n  // setup Barrett\n  this.r2 = nbi();\n  this.q3 = nbi();\n  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n  this.mu = this.r2.divide(m);\n  this.m = m;\n}\n\nfunction barrettConvert(x) {\n  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);else if (x.compareTo(this.m) < 0) return x;else {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n  }\n}\n\nfunction barrettRevert(x) {\n  return x;\n} //x = x mod m (HAC 14.42)\n\n\nfunction barrettReduce(x) {\n  x.drShiftTo(this.m.t - 1, this.r2);\n\n  if (x.t > this.m.t + 1) {\n    x.t = this.m.t + 1;\n    x.clamp();\n  }\n\n  this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n  this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n\n  while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);\n\n  x.subTo(this.r2, x);\n\n  while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n} //r = x^2 mod m; x != r\n\n\nfunction barrettSqrTo(x, r) {\n  x.squareTo(r);\n  this.reduce(r);\n} //r = x*y mod m; x,y != r\n\n\nfunction barrettMulTo(x, y, r) {\n  x.multiplyTo(y, r);\n  this.reduce(r);\n}\n\nBarrett.prototype.convert = barrettConvert;\nBarrett.prototype.revert = barrettRevert;\nBarrett.prototype.reduce = barrettReduce;\nBarrett.prototype.mulTo = barrettMulTo;\nBarrett.prototype.sqrTo = barrettSqrTo; //(public) this^e % m (HAC 14.85)\n\nfunction bnModPow(e, m) {\n  var i = e.bitLength(),\n      k,\n      r = nbv(1),\n      z;\n  if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;\n  if (i < 8) z = new Classic(m);else if (m.isEven()) z = new Barrett(m);else z = new Montgomery(m); // precomputation\n\n  var g = new Array(),\n      n = 3,\n      k1 = k - 1,\n      km = (1 << k) - 1;\n  g[1] = z.convert(this);\n\n  if (k > 1) {\n    var g2 = nbi();\n    z.sqrTo(g[1], g2);\n\n    while (n <= km) {\n      g[n] = nbi();\n      z.mulTo(g2, g[n - 2], g[n]);\n      n += 2;\n    }\n  }\n\n  var j = e.t - 1,\n      w,\n      is1 = true,\n      r2 = nbi(),\n      t;\n  i = nbits(e[j]) - 1;\n\n  while (j >= 0) {\n    if (i >= k1) w = e[j] >> i - k1 & km;else {\n      w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n      if (j > 0) w |= e[j - 1] >> this.DB + i - k1;\n    }\n    n = k;\n\n    while ((w & 1) === 0) {\n      w >>= 1;\n      --n;\n    }\n\n    if ((i -= n) < 0) {\n      i += this.DB;\n      --j;\n    }\n\n    if (is1) {\n      // ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r);\n      is1 = false;\n    } else {\n      while (n > 1) {\n        z.sqrTo(r, r2);\n        z.sqrTo(r2, r);\n        n -= 2;\n      }\n\n      if (n > 0) z.sqrTo(r, r2);else {\n        t = r;\n        r = r2;\n        r2 = t;\n      }\n      z.mulTo(r2, g[w], r);\n    }\n\n    while (j >= 0 && (e[j] & 1 << i) === 0) {\n      z.sqrTo(r, r2);\n      t = r;\n      r = r2;\n      r2 = t;\n\n      if (--i < 0) {\n        i = this.DB - 1;\n        --j;\n      }\n    }\n  }\n\n  return z.revert(r);\n} //(public) gcd(this,a) (HAC 14.54)\n\n\nfunction bnGCD(a) {\n  var x = this.s < 0 ? this.negate() : this.clone();\n  var y = a.s < 0 ? a.negate() : a.clone();\n\n  if (x.compareTo(y) < 0) {\n    var t = x;\n    x = y;\n    y = t;\n  }\n\n  var i = x.getLowestSetBit(),\n      g = y.getLowestSetBit();\n  if (g < 0) return x;\n  if (i < g) g = i;\n\n  if (g > 0) {\n    x.rShiftTo(g, x);\n    y.rShiftTo(g, y);\n  }\n\n  while (x.signum() > 0) {\n    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n\n    if (x.compareTo(y) >= 0) {\n      x.subTo(y, x);\n      x.rShiftTo(1, x);\n    } else {\n      y.subTo(x, y);\n      y.rShiftTo(1, y);\n    }\n  }\n\n  if (g > 0) y.lShiftTo(g, y);\n  return y;\n} //(protected) this % n, n < 2^26\n\n\nfunction bnpModInt(n) {\n  if (n <= 0) return 0;\n  var d = this.DV % n,\n      r = this.s < 0 ? n - 1 : 0;\n  if (this.t > 0) if (d === 0) r = this[0] % n;else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;\n  return r;\n} //(public) 1/this % m (HAC 14.61)\n\n\nfunction bnModInverse(m) {\n  var ac = m.isEven();\n  if (this.isEven() && ac || m.signum() === 0) return BigInteger.ZERO;\n  var u = m.clone(),\n      v = this.clone();\n  var a = nbv(1),\n      b = nbv(0),\n      c = nbv(0),\n      d = nbv(1);\n\n  while (u.signum() != 0) {\n    while (u.isEven()) {\n      u.rShiftTo(1, u);\n\n      if (ac) {\n        if (!a.isEven() || !b.isEven()) {\n          a.addTo(this, a);\n          b.subTo(m, b);\n        }\n\n        a.rShiftTo(1, a);\n      } else if (!b.isEven()) b.subTo(m, b);\n\n      b.rShiftTo(1, b);\n    }\n\n    while (v.isEven()) {\n      v.rShiftTo(1, v);\n\n      if (ac) {\n        if (!c.isEven() || !d.isEven()) {\n          c.addTo(this, c);\n          d.subTo(m, d);\n        }\n\n        c.rShiftTo(1, c);\n      } else if (!d.isEven()) d.subTo(m, d);\n\n      d.rShiftTo(1, d);\n    }\n\n    if (u.compareTo(v) >= 0) {\n      u.subTo(v, u);\n      if (ac) a.subTo(c, a);\n      b.subTo(d, b);\n    } else {\n      v.subTo(u, v);\n      if (ac) c.subTo(a, c);\n      d.subTo(b, d);\n    }\n  }\n\n  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n  if (d.compareTo(m) >= 0) return d.subtract(m);\n  if (d.signum() < 0) d.addTo(m, d);else return d;\n  if (d.signum() < 0) return d.add(m);else return d;\n}\n\nvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1]; //(public) test primality with certainty >= 1-.5^t\n\nfunction bnIsProbablePrime(t) {\n  var i,\n      x = this.abs();\n\n  if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n    for (i = 0; i < lowprimes.length; ++i) if (x[0] == lowprimes[i]) return true;\n\n    return false;\n  }\n\n  if (x.isEven()) return false;\n  i = 1;\n\n  while (i < lowprimes.length) {\n    var m = lowprimes[i],\n        j = i + 1;\n\n    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n\n    m = x.modInt(m);\n\n    while (i < j) if (m % lowprimes[i++] === 0) return false;\n  }\n\n  return x.millerRabin(t);\n} //(protected) true if probably prime (HAC 4.24, Miller-Rabin)\n\n\nfunction bnpMillerRabin(t) {\n  var n1 = this.subtract(BigInteger.ONE);\n  var k = n1.getLowestSetBit();\n  if (k <= 0) return false;\n  var r = n1.shiftRight(k);\n  t = t + 1 >> 1;\n  if (t > lowprimes.length) t = lowprimes.length;\n  var a = nbi();\n\n  for (var i = 0; i < t; ++i) {\n    //Pick bases at random, instead of starting at 2\n    a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n    var y = a.modPow(r, this);\n\n    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n      var j = 1;\n\n      while (j++ < k && y.compareTo(n1) != 0) {\n        y = y.modPowInt(2, this);\n        if (y.compareTo(BigInteger.ONE) === 0) return false;\n      }\n\n      if (y.compareTo(n1) != 0) return false;\n    }\n  }\n\n  return true;\n} // protected\n\n\nBigInteger.prototype.copyTo = bnpCopyTo;\nBigInteger.prototype.fromInt = bnpFromInt;\nBigInteger.prototype.fromString = bnpFromString;\nBigInteger.prototype.fromByteArray = bnpFromByteArray;\nBigInteger.prototype.fromBuffer = bnpFromBuffer;\nBigInteger.prototype.clamp = bnpClamp;\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\nBigInteger.prototype.subTo = bnpSubTo;\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\nBigInteger.prototype.squareTo = bnpSquareTo;\nBigInteger.prototype.divRemTo = bnpDivRemTo;\nBigInteger.prototype.invDigit = bnpInvDigit;\nBigInteger.prototype.isEven = bnpIsEven;\nBigInteger.prototype.exp = bnpExp;\nBigInteger.prototype.chunkSize = bnpChunkSize;\nBigInteger.prototype.toRadix = bnpToRadix;\nBigInteger.prototype.fromRadix = bnpFromRadix;\nBigInteger.prototype.fromNumber = bnpFromNumber;\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\nBigInteger.prototype.changeBit = bnpChangeBit;\nBigInteger.prototype.addTo = bnpAddTo;\nBigInteger.prototype.dMultiply = bnpDMultiply;\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\nBigInteger.prototype.modInt = bnpModInt;\nBigInteger.prototype.millerRabin = bnpMillerRabin; // public\n\nBigInteger.prototype.toString = bnToString;\nBigInteger.prototype.negate = bnNegate;\nBigInteger.prototype.abs = bnAbs;\nBigInteger.prototype.compareTo = bnCompareTo;\nBigInteger.prototype.bitLength = bnBitLength;\nBigInteger.prototype.mod = bnMod;\nBigInteger.prototype.modPowInt = bnModPowInt;\nBigInteger.prototype.clone = bnClone;\nBigInteger.prototype.intValue = bnIntValue;\nBigInteger.prototype.byteValue = bnByteValue;\nBigInteger.prototype.shortValue = bnShortValue;\nBigInteger.prototype.signum = bnSigNum;\nBigInteger.prototype.toByteArray = bnToByteArray;\nBigInteger.prototype.toBuffer = bnToBuffer;\nBigInteger.prototype.equals = bnEquals;\nBigInteger.prototype.min = bnMin;\nBigInteger.prototype.max = bnMax;\nBigInteger.prototype.and = bnAnd;\nBigInteger.prototype.or = bnOr;\nBigInteger.prototype.xor = bnXor;\nBigInteger.prototype.andNot = bnAndNot;\nBigInteger.prototype.not = bnNot;\nBigInteger.prototype.shiftLeft = bnShiftLeft;\nBigInteger.prototype.shiftRight = bnShiftRight;\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\nBigInteger.prototype.bitCount = bnBitCount;\nBigInteger.prototype.testBit = bnTestBit;\nBigInteger.prototype.setBit = bnSetBit;\nBigInteger.prototype.clearBit = bnClearBit;\nBigInteger.prototype.flipBit = bnFlipBit;\nBigInteger.prototype.add = bnAdd;\nBigInteger.prototype.subtract = bnSubtract;\nBigInteger.prototype.multiply = bnMultiply;\nBigInteger.prototype.divide = bnDivide;\nBigInteger.prototype.remainder = bnRemainder;\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\nBigInteger.prototype.modPow = bnModPow;\nBigInteger.prototype.modInverse = bnModInverse;\nBigInteger.prototype.pow = bnPow;\nBigInteger.prototype.gcd = bnGCD;\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime;\nBigInteger.int2char = int2char; // \"constants\"\n\nBigInteger.ZERO = nbv(0);\nBigInteger.ONE = nbv(1); // JSBN-specific extension\n\nBigInteger.prototype.square = bnSquare; //BigInteger interfaces not implemented in jsbn:\n//BigInteger(int signum, byte[] magnitude)\n//double doubleValue()\n//float floatValue()\n//int hashCode()\n//long longValue()\n//static BigInteger valueOf(long val)\n\nmodule.exports = BigInteger;","map":{"version":3,"sources":["C:/Users/Zaman/zaman/RSA/front/node_modules/node-rsa/src/libs/jsbn.js"],"names":["crypt","require","_","dbits","canary","j_lm","BigInteger","a","b","fromNumber","Buffer","isBuffer","fromBuffer","fromByteArray","fromString","nbi","am1","i","x","w","j","c","n","v","Math","floor","am2","xl","xh","l","h","m","am3","prototype","am","DB","DM","DV","BI_FP","FV","pow","F1","F2","BI_RM","BI_RC","Array","rr","vv","charCodeAt","int2char","charAt","intAt","s","bnpCopyTo","r","t","bnpFromInt","nbv","fromInt","bnpFromString","data","radix","unsigned","k","fromRadix","length","mi","sh","clamp","ZERO","subTo","bnpFromByteArray","bnpFromBuffer","bnpClamp","bnToString","negate","toString","toRadix","km","d","p","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","max","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","abs","y","bnpSquareTo","bnpDivRemTo","q","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","d1","d2","e","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","Classic","cConvert","mod","cRevert","cReduce","cMulTo","multiplyTo","reduce","cSqrTo","squareTo","convert","revert","mulTo","sqrTo","bnpInvDigit","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","z","r2","g","bnModPowInt","isEven","exp","bnClone","bnIntValue","bnByteValue","bnShortValue","bnpChunkSize","LN2","log","bnSigNum","bnpToRadix","signum","cs","chunkSize","intValue","substr","bnpFromRadix","dMultiply","dAddOffset","bnpFromNumber","testBit","bitwiseTo","shiftLeft","op_or","isProbablePrime","bitLength","randomBytes","bnToByteArray","bnToBuffer","trimOrSize","res","from","toByteArray","slice","isNumber","padded","alloc","fill","copy","bnEquals","bnMin","bnMax","bnpBitwiseTo","op","f","op_and","bnAnd","bnOr","op_xor","bnXor","op_andnot","bnAndNot","bnNot","bnShiftLeft","bnShiftRight","lbit","bnGetLowestSetBit","cbit","bnBitCount","bnTestBit","bnpChangeBit","bnSetBit","changeBit","bnClearBit","bnFlipBit","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","bnSquare","bnDivide","bnRemainder","bnDivideAndRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","q3","mu","divide","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","barrettSqrTo","barrettMulTo","bnModPow","k1","g2","is1","bnGCD","clone","getLowestSetBit","bnpModInt","bnModInverse","ac","u","subtract","add","lowprimes","lplim","bnIsProbablePrime","modInt","millerRabin","bnpMillerRabin","n1","shiftRight","random","modPow","modPowInt","byteValue","shortValue","toBuffer","equals","and","or","xor","andNot","not","bitCount","setBit","clearBit","flipBit","multiply","remainder","divideAndRemainder","modInverse","gcd","square","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Basic JavaScript BN library - subset useful for RSA encryption.\r\n * \r\n * Copyright (c) 2003-2005  Tom Wu\r\n * All Rights Reserved.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, \r\n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY \r\n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  \r\n *\r\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\r\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\r\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\r\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\r\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n *\r\n * In addition, the following condition applies:\r\n *\r\n * All redistributions must retain an intact copy of this copyright notice\r\n * and disclaimer.\r\n */\r\n\r\n/*\r\n * Added Node.js Buffers support\r\n * 2014 rzcoder\r\n */\r\n\r\nvar crypt = require('crypto');\r\nvar _ = require('../utils')._;\r\n\r\n// Bits per digit\r\nvar dbits;\r\n\r\n// JavaScript engine analysis\r\nvar canary = 0xdeadbeefcafe;\r\nvar j_lm = ((canary & 0xffffff) == 0xefcafe);\r\n\r\n// (public) Constructor\r\nfunction BigInteger(a, b) {\r\n    if (a != null) {\r\n        if (\"number\" == typeof a) {\r\n            this.fromNumber(a, b);\r\n        } else if (Buffer.isBuffer(a)) {\r\n            this.fromBuffer(a);\r\n        } else if (b == null && \"string\" != typeof a) {\r\n            this.fromByteArray(a);\r\n        } else {\r\n            this.fromString(a, b);\r\n        }\r\n    }\r\n}\r\n\r\n// return new, unset BigInteger\r\nfunction nbi() {\r\n    return new BigInteger(null);\r\n}\r\n\r\n// am: Compute w_j += (x*this_i), propagate carries,\r\n// c is initial carry, returns final carry.\r\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\r\n// We need to select the fastest one that works in this environment.\r\n\r\n// am1: use a single mult and divide to get the high bits,\r\n// max digit bits should be 26 because\r\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\r\nfunction am1(i, x, w, j, c, n) {\r\n    while (--n >= 0) {\r\n        var v = x * this[i++] + w[j] + c;\r\n        c = Math.floor(v / 0x4000000);\r\n        w[j++] = v & 0x3ffffff;\r\n    }\r\n    return c;\r\n}\r\n// am2 avoids a big mult-and-extract completely.\r\n// Max digit bits should be <= 30 because we do bitwise ops\r\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\r\nfunction am2(i, x, w, j, c, n) {\r\n    var xl = x & 0x7fff, xh = x >> 15;\r\n    while (--n >= 0) {\r\n        var l = this[i] & 0x7fff;\r\n        var h = this[i++] >> 15;\r\n        var m = xh * l + h * xl;\r\n        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\r\n        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\r\n        w[j++] = l & 0x3fffffff;\r\n    }\r\n    return c;\r\n}\r\n// Alternately, set max digit bits to 28 since some\r\n// browsers slow down when dealing with 32-bit numbers.\r\nfunction am3(i, x, w, j, c, n) {\r\n    var xl = x & 0x3fff, xh = x >> 14;\r\n    while (--n >= 0) {\r\n        var l = this[i] & 0x3fff;\r\n        var h = this[i++] >> 14;\r\n        var m = xh * l + h * xl;\r\n        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\r\n        c = (l >> 28) + (m >> 14) + xh * h;\r\n        w[j++] = l & 0xfffffff;\r\n    }\r\n    return c;\r\n}\r\n\r\n// We need to select the fastest one that works in this environment. \r\n//if (j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\r\n//\tBigInteger.prototype.am = am2;\r\n//\tdbits = 30;\r\n//} else if (j_lm && (navigator.appName != \"Netscape\")) {\r\n//\tBigInteger.prototype.am = am1;\r\n//\tdbits = 26;\r\n//} else { // Mozilla/Netscape seems to prefer am3\r\n//\tBigInteger.prototype.am = am3;\r\n//\tdbits = 28;\r\n//}\r\n\r\n// For node.js, we pick am3 with max dbits to 28.\r\nBigInteger.prototype.am = am3;\r\ndbits = 28;\r\n\r\nBigInteger.prototype.DB = dbits;\r\nBigInteger.prototype.DM = ((1 << dbits) - 1);\r\nBigInteger.prototype.DV = (1 << dbits);\r\n\r\nvar BI_FP = 52;\r\nBigInteger.prototype.FV = Math.pow(2, BI_FP);\r\nBigInteger.prototype.F1 = BI_FP - dbits;\r\nBigInteger.prototype.F2 = 2 * dbits - BI_FP;\r\n\r\n// Digit conversions\r\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\nvar BI_RC = new Array();\r\nvar rr, vv;\r\nrr = \"0\".charCodeAt(0);\r\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\r\nrr = \"a\".charCodeAt(0);\r\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\r\nrr = \"A\".charCodeAt(0);\r\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\r\n\r\nfunction int2char(n) {\r\n    return BI_RM.charAt(n);\r\n}\r\nfunction intAt(s, i) {\r\n    var c = BI_RC[s.charCodeAt(i)];\r\n    return (c == null) ? -1 : c;\r\n}\r\n\r\n// (protected) copy this to r\r\nfunction bnpCopyTo(r) {\r\n    for (var i = this.t - 1; i >= 0; --i) r[i] = this[i];\r\n    r.t = this.t;\r\n    r.s = this.s;\r\n}\r\n\r\n// (protected) set from integer value x, -DV <= x < DV\r\nfunction bnpFromInt(x) {\r\n    this.t = 1;\r\n    this.s = (x < 0) ? -1 : 0;\r\n    if (x > 0) this[0] = x;\r\n    else if (x < -1) this[0] = x + DV;\r\n    else this.t = 0;\r\n}\r\n\r\n// return bigint initialized to value\r\nfunction nbv(i) {\r\n    var r = nbi();\r\n    r.fromInt(i);\r\n    return r;\r\n}\r\n\r\n// (protected) set from string and radix\r\nfunction bnpFromString(data, radix, unsigned) {\r\n    var k;\r\n    switch (radix) {\r\n        case 2:\r\n            k = 1;\r\n            break;\r\n        case 4:\r\n            k = 2;\r\n            break;\r\n        case 8:\r\n            k = 3;\r\n            break;\r\n        case 16:\r\n            k = 4;\r\n            break;\r\n        case 32:\r\n            k = 5;\r\n            break;\r\n        case 256:\r\n            k = 8;\r\n            break;\r\n        default:\r\n            this.fromRadix(data, radix);\r\n            return;\r\n    }\r\n\r\n    this.t = 0;\r\n    this.s = 0;\r\n\r\n    var i = data.length;\r\n    var mi = false;\r\n    var sh = 0;\r\n\r\n    while (--i >= 0) {\r\n        var x = (k == 8) ? data[i] & 0xff : intAt(data, i);\r\n        if (x < 0) {\r\n            if (data.charAt(i) == \"-\") mi = true;\r\n            continue;\r\n        }\r\n        mi = false;\r\n        if (sh === 0)\r\n            this[this.t++] = x;\r\n        else if (sh + k > this.DB) {\r\n            this[this.t - 1] |= (x & ((1 << (this.DB - sh)) - 1)) << sh;\r\n            this[this.t++] = (x >> (this.DB - sh));\r\n        }\r\n        else\r\n            this[this.t - 1] |= x << sh;\r\n        sh += k;\r\n        if (sh >= this.DB) sh -= this.DB;\r\n    }\r\n    if ((!unsigned) && k == 8 && (data[0] & 0x80) != 0) {\r\n        this.s = -1;\r\n        if (sh > 0) this[this.t - 1] |= ((1 << (this.DB - sh)) - 1) << sh;\r\n    }\r\n    this.clamp();\r\n    if (mi) BigInteger.ZERO.subTo(this, this);\r\n}\r\n\r\nfunction bnpFromByteArray(a, unsigned) {\r\n    this.fromString(a, 256, unsigned)\r\n}\r\n\r\nfunction bnpFromBuffer(a) {\r\n    this.fromString(a, 256, true)\r\n}\r\n\r\n// (protected) clamp off excess high words\r\nfunction bnpClamp() {\r\n    var c = this.s & this.DM;\r\n    while (this.t > 0 && this[this.t - 1] == c) --this.t;\r\n}\r\n\r\n// (public) return string representation in given radix\r\nfunction bnToString(b) {\r\n    if (this.s < 0) return \"-\" + this.negate().toString(b);\r\n    var k;\r\n    if (b == 16) k = 4;\r\n    else if (b == 8) k = 3;\r\n    else if (b == 2) k = 1;\r\n    else if (b == 32) k = 5;\r\n    else if (b == 4) k = 2;\r\n    else return this.toRadix(b);\r\n    var km = (1 << k) - 1, d, m = false, r = \"\", i = this.t;\r\n    var p = this.DB - (i * this.DB) % k;\r\n    if (i-- > 0) {\r\n        if (p < this.DB && (d = this[i] >> p) > 0) {\r\n            m = true;\r\n            r = int2char(d);\r\n        }\r\n        while (i >= 0) {\r\n            if (p < k) {\r\n                d = (this[i] & ((1 << p) - 1)) << (k - p);\r\n                d |= this[--i] >> (p += this.DB - k);\r\n            }\r\n            else {\r\n                d = (this[i] >> (p -= k)) & km;\r\n                if (p <= 0) {\r\n                    p += this.DB;\r\n                    --i;\r\n                }\r\n            }\r\n            if (d > 0) m = true;\r\n            if (m) r += int2char(d);\r\n        }\r\n    }\r\n    return m ? r : \"0\";\r\n}\r\n\r\n// (public) -this\r\nfunction bnNegate() {\r\n    var r = nbi();\r\n    BigInteger.ZERO.subTo(this, r);\r\n    return r;\r\n}\r\n\r\n// (public) |this|\r\nfunction bnAbs() {\r\n    return (this.s < 0) ? this.negate() : this;\r\n}\r\n\r\n// (public) return + if this > a, - if this < a, 0 if equal\r\nfunction bnCompareTo(a) {\r\n    var r = this.s - a.s;\r\n    if (r != 0) return r;\r\n    var i = this.t;\r\n    r = i - a.t;\r\n    if (r != 0) return (this.s < 0) ? -r : r;\r\n    while (--i >= 0) if ((r = this[i] - a[i]) != 0) return r;\r\n    return 0;\r\n}\r\n\r\n// returns bit length of the integer x\r\nfunction nbits(x) {\r\n    var r = 1, t;\r\n    if ((t = x >>> 16) != 0) {\r\n        x = t;\r\n        r += 16;\r\n    }\r\n    if ((t = x >> 8) != 0) {\r\n        x = t;\r\n        r += 8;\r\n    }\r\n    if ((t = x >> 4) != 0) {\r\n        x = t;\r\n        r += 4;\r\n    }\r\n    if ((t = x >> 2) != 0) {\r\n        x = t;\r\n        r += 2;\r\n    }\r\n    if ((t = x >> 1) != 0) {\r\n        x = t;\r\n        r += 1;\r\n    }\r\n    return r;\r\n}\r\n\r\n// (public) return the number of bits in \"this\"\r\nfunction bnBitLength() {\r\n    if (this.t <= 0) return 0;\r\n    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM));\r\n}\r\n\r\n// (protected) r = this << n*DB\r\nfunction bnpDLShiftTo(n, r) {\r\n    var i;\r\n    for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i];\r\n    for (i = n - 1; i >= 0; --i) r[i] = 0;\r\n    r.t = this.t + n;\r\n    r.s = this.s;\r\n}\r\n\r\n// (protected) r = this >> n*DB\r\nfunction bnpDRShiftTo(n, r) {\r\n    for (var i = n; i < this.t; ++i) r[i - n] = this[i];\r\n    r.t = Math.max(this.t - n, 0);\r\n    r.s = this.s;\r\n}\r\n\r\n// (protected) r = this << n\r\nfunction bnpLShiftTo(n, r) {\r\n    var bs = n % this.DB;\r\n    var cbs = this.DB - bs;\r\n    var bm = (1 << cbs) - 1;\r\n    var ds = Math.floor(n / this.DB), c = (this.s << bs) & this.DM, i;\r\n    for (i = this.t - 1; i >= 0; --i) {\r\n        r[i + ds + 1] = (this[i] >> cbs) | c;\r\n        c = (this[i] & bm) << bs;\r\n    }\r\n    for (i = ds - 1; i >= 0; --i) r[i] = 0;\r\n    r[ds] = c;\r\n    r.t = this.t + ds + 1;\r\n    r.s = this.s;\r\n    r.clamp();\r\n}\r\n\r\n// (protected) r = this >> n\r\nfunction bnpRShiftTo(n, r) {\r\n    r.s = this.s;\r\n    var ds = Math.floor(n / this.DB);\r\n    if (ds >= this.t) {\r\n        r.t = 0;\r\n        return;\r\n    }\r\n    var bs = n % this.DB;\r\n    var cbs = this.DB - bs;\r\n    var bm = (1 << bs) - 1;\r\n    r[0] = this[ds] >> bs;\r\n    for (var i = ds + 1; i < this.t; ++i) {\r\n        r[i - ds - 1] |= (this[i] & bm) << cbs;\r\n        r[i - ds] = this[i] >> bs;\r\n    }\r\n    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\r\n    r.t = this.t - ds;\r\n    r.clamp();\r\n}\r\n\r\n// (protected) r = this - a\r\nfunction bnpSubTo(a, r) {\r\n    var i = 0, c = 0, m = Math.min(a.t, this.t);\r\n    while (i < m) {\r\n        c += this[i] - a[i];\r\n        r[i++] = c & this.DM;\r\n        c >>= this.DB;\r\n    }\r\n    if (a.t < this.t) {\r\n        c -= a.s;\r\n        while (i < this.t) {\r\n            c += this[i];\r\n            r[i++] = c & this.DM;\r\n            c >>= this.DB;\r\n        }\r\n        c += this.s;\r\n    }\r\n    else {\r\n        c += this.s;\r\n        while (i < a.t) {\r\n            c -= a[i];\r\n            r[i++] = c & this.DM;\r\n            c >>= this.DB;\r\n        }\r\n        c -= a.s;\r\n    }\r\n    r.s = (c < 0) ? -1 : 0;\r\n    if (c < -1) r[i++] = this.DV + c;\r\n    else if (c > 0) r[i++] = c;\r\n    r.t = i;\r\n    r.clamp();\r\n}\r\n\r\n// (protected) r = this * a, r != this,a (HAC 14.12)\r\n// \"this\" should be the larger one if appropriate.\r\nfunction bnpMultiplyTo(a, r) {\r\n    var x = this.abs(), y = a.abs();\r\n    var i = x.t;\r\n    r.t = i + y.t;\r\n    while (--i >= 0) r[i] = 0;\r\n    for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\r\n    r.s = 0;\r\n    r.clamp();\r\n    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\r\n}\r\n\r\n// (protected) r = this^2, r != this (HAC 14.16)\r\nfunction bnpSquareTo(r) {\r\n    var x = this.abs();\r\n    var i = r.t = 2 * x.t;\r\n    while (--i >= 0) r[i] = 0;\r\n    for (i = 0; i < x.t - 1; ++i) {\r\n        var c = x.am(i, x[i], r, 2 * i, 0, 1);\r\n        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\r\n            r[i + x.t] -= x.DV;\r\n            r[i + x.t + 1] = 1;\r\n        }\r\n    }\r\n    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\r\n    r.s = 0;\r\n    r.clamp();\r\n}\r\n\r\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\r\n// r != q, this != m.  q or r may be null.\r\nfunction bnpDivRemTo(m, q, r) {\r\n    var pm = m.abs();\r\n    if (pm.t <= 0) return;\r\n    var pt = this.abs();\r\n    if (pt.t < pm.t) {\r\n        if (q != null) q.fromInt(0);\r\n        if (r != null) this.copyTo(r);\r\n        return;\r\n    }\r\n    if (r == null) r = nbi();\r\n    var y = nbi(), ts = this.s, ms = m.s;\r\n    var nsh = this.DB - nbits(pm[pm.t - 1]);\t// normalize modulus\r\n    if (nsh > 0) {\r\n        pm.lShiftTo(nsh, y);\r\n        pt.lShiftTo(nsh, r);\r\n    }\r\n    else {\r\n        pm.copyTo(y);\r\n        pt.copyTo(r);\r\n    }\r\n    var ys = y.t;\r\n    var y0 = y[ys - 1];\r\n    if (y0 === 0) return;\r\n    var yt = y0 * (1 << this.F1) + ((ys > 1) ? y[ys - 2] >> this.F2 : 0);\r\n    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;\r\n    var i = r.t, j = i - ys, t = (q == null) ? nbi() : q;\r\n    y.dlShiftTo(j, t);\r\n    if (r.compareTo(t) >= 0) {\r\n        r[r.t++] = 1;\r\n        r.subTo(t, r);\r\n    }\r\n    BigInteger.ONE.dlShiftTo(ys, t);\r\n    t.subTo(y, y);\t// \"negative\" y so we can replace sub with am later\r\n    while (y.t < ys) y[y.t++] = 0;\r\n    while (--j >= 0) {\r\n        // Estimate quotient digit\r\n        var qd = (r[--i] == y0) ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\r\n        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\t// Try it out\r\n            y.dlShiftTo(j, t);\r\n            r.subTo(t, r);\r\n            while (r[i] < --qd) r.subTo(t, r);\r\n        }\r\n    }\r\n    if (q != null) {\r\n        r.drShiftTo(ys, q);\r\n        if (ts != ms) BigInteger.ZERO.subTo(q, q);\r\n    }\r\n    r.t = ys;\r\n    r.clamp();\r\n    if (nsh > 0) r.rShiftTo(nsh, r);\t// Denormalize remainder\r\n    if (ts < 0) BigInteger.ZERO.subTo(r, r);\r\n}\r\n\r\n// (public) this mod a\r\nfunction bnMod(a) {\r\n    var r = nbi();\r\n    this.abs().divRemTo(a, null, r);\r\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\r\n    return r;\r\n}\r\n\r\n// Modular reduction using \"classic\" algorithm\r\nfunction Classic(m) {\r\n    this.m = m;\r\n}\r\nfunction cConvert(x) {\r\n    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\r\n    else return x;\r\n}\r\nfunction cRevert(x) {\r\n    return x;\r\n}\r\nfunction cReduce(x) {\r\n    x.divRemTo(this.m, null, x);\r\n}\r\nfunction cMulTo(x, y, r) {\r\n    x.multiplyTo(y, r);\r\n    this.reduce(r);\r\n}\r\nfunction cSqrTo(x, r) {\r\n    x.squareTo(r);\r\n    this.reduce(r);\r\n}\r\n\r\nClassic.prototype.convert = cConvert;\r\nClassic.prototype.revert = cRevert;\r\nClassic.prototype.reduce = cReduce;\r\nClassic.prototype.mulTo = cMulTo;\r\nClassic.prototype.sqrTo = cSqrTo;\r\n\r\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\r\n// justification:\r\n//         xy == 1 (mod m)\r\n//         xy =  1+km\r\n//   xy(2-xy) = (1+km)(1-km)\r\n// x[y(2-xy)] = 1-k^2m^2\r\n// x[y(2-xy)] == 1 (mod m^2)\r\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\r\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\r\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\r\nfunction bnpInvDigit() {\r\n    if (this.t < 1) return 0;\r\n    var x = this[0];\r\n    if ((x & 1) === 0) return 0;\r\n    var y = x & 3;\t\t// y == 1/x mod 2^2\r\n    y = (y * (2 - (x & 0xf) * y)) & 0xf;\t// y == 1/x mod 2^4\r\n    y = (y * (2 - (x & 0xff) * y)) & 0xff;\t// y == 1/x mod 2^8\r\n    y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff;\t// y == 1/x mod 2^16\r\n    // last step - calculate inverse mod DV directly;\r\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\r\n    y = (y * (2 - x * y % this.DV)) % this.DV;\t\t// y == 1/x mod 2^dbits\r\n    // we really want the negative inverse, and -DV < y < DV\r\n    return (y > 0) ? this.DV - y : -y;\r\n}\r\n\r\n// Montgomery reduction\r\nfunction Montgomery(m) {\r\n    this.m = m;\r\n    this.mp = m.invDigit();\r\n    this.mpl = this.mp & 0x7fff;\r\n    this.mph = this.mp >> 15;\r\n    this.um = (1 << (m.DB - 15)) - 1;\r\n    this.mt2 = 2 * m.t;\r\n}\r\n\r\n// xR mod m\r\nfunction montConvert(x) {\r\n    var r = nbi();\r\n    x.abs().dlShiftTo(this.m.t, r);\r\n    r.divRemTo(this.m, null, r);\r\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\r\n    return r;\r\n}\r\n\r\n// x/R mod m\r\nfunction montRevert(x) {\r\n    var r = nbi();\r\n    x.copyTo(r);\r\n    this.reduce(r);\r\n    return r;\r\n}\r\n\r\n// x = x/R mod m (HAC 14.32)\r\nfunction montReduce(x) {\r\n    while (x.t <= this.mt2)\t// pad x so am has enough room later\r\n        x[x.t++] = 0;\r\n    for (var i = 0; i < this.m.t; ++i) {\r\n        // faster way of calculating u0 = x[i]*mp mod DV\r\n        var j = x[i] & 0x7fff;\r\n        var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM;\r\n        // use am to combine the multiply-shift-add into one call\r\n        j = i + this.m.t;\r\n        x[j] += this.m.am(0, u0, x, i, 0, this.m.t);\r\n        // propagate carry\r\n        while (x[j] >= x.DV) {\r\n            x[j] -= x.DV;\r\n            x[++j]++;\r\n        }\r\n    }\r\n    x.clamp();\r\n    x.drShiftTo(this.m.t, x);\r\n    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\r\n}\r\n\r\n// r = \"x^2/R mod m\"; x != r\r\nfunction montSqrTo(x, r) {\r\n    x.squareTo(r);\r\n    this.reduce(r);\r\n}\r\n\r\n// r = \"xy/R mod m\"; x,y != r\r\nfunction montMulTo(x, y, r) {\r\n    x.multiplyTo(y, r);\r\n    this.reduce(r);\r\n}\r\n\r\nMontgomery.prototype.convert = montConvert;\r\nMontgomery.prototype.revert = montRevert;\r\nMontgomery.prototype.reduce = montReduce;\r\nMontgomery.prototype.mulTo = montMulTo;\r\nMontgomery.prototype.sqrTo = montSqrTo;\r\n\r\n// (protected) true iff this is even\r\nfunction bnpIsEven() {\r\n    return ((this.t > 0) ? (this[0] & 1) : this.s) === 0;\r\n}\r\n\r\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\r\nfunction bnpExp(e, z) {\r\n    if (e > 0xffffffff || e < 1) return BigInteger.ONE;\r\n    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e) - 1;\r\n    g.copyTo(r);\r\n    while (--i >= 0) {\r\n        z.sqrTo(r, r2);\r\n        if ((e & (1 << i)) > 0) z.mulTo(r2, g, r);\r\n        else {\r\n            var t = r;\r\n            r = r2;\r\n            r2 = t;\r\n        }\r\n    }\r\n    return z.revert(r);\r\n}\r\n\r\n// (public) this^e % m, 0 <= e < 2^32\r\nfunction bnModPowInt(e, m) {\r\n    var z;\r\n    if (e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\r\n    return this.exp(e, z);\r\n}\r\n\r\n// Copyright (c) 2005-2009  Tom Wu\r\n// All Rights Reserved.\r\n// See \"LICENSE\" for details.\r\n\r\n// Extended JavaScript BN functions, required for RSA private ops.\r\n\r\n// Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\r\n// Version 1.2: square() API, isProbablePrime fix\r\n\r\n//(public)\r\nfunction bnClone() {\r\n    var r = nbi();\r\n    this.copyTo(r);\r\n    return r;\r\n}\r\n\r\n//(public) return value as integer\r\nfunction bnIntValue() {\r\n    if (this.s < 0) {\r\n        if (this.t == 1) return this[0] - this.DV;\r\n        else if (this.t === 0) return -1;\r\n    }\r\n    else if (this.t == 1) return this[0];\r\n    else if (this.t === 0) return 0;\r\n// assumes 16 < DB < 32\r\n    return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0];\r\n}\r\n\r\n//(public) return value as byte\r\nfunction bnByteValue() {\r\n    return (this.t == 0) ? this.s : (this[0] << 24) >> 24;\r\n}\r\n\r\n//(public) return value as short (assumes DB>=16)\r\nfunction bnShortValue() {\r\n    return (this.t == 0) ? this.s : (this[0] << 16) >> 16;\r\n}\r\n\r\n//(protected) return x s.t. r^x < DV\r\nfunction bnpChunkSize(r) {\r\n    return Math.floor(Math.LN2 * this.DB / Math.log(r));\r\n}\r\n\r\n//(public) 0 if this === 0, 1 if this > 0\r\nfunction bnSigNum() {\r\n    if (this.s < 0) return -1;\r\n    else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\r\n    else return 1;\r\n}\r\n\r\n//(protected) convert to radix string\r\nfunction bnpToRadix(b) {\r\n    if (b == null) b = 10;\r\n    if (this.signum() === 0 || b < 2 || b > 36) return \"0\";\r\n    var cs = this.chunkSize(b);\r\n    var a = Math.pow(b, cs);\r\n    var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\r\n    this.divRemTo(d, y, z);\r\n    while (y.signum() > 0) {\r\n        r = (a + z.intValue()).toString(b).substr(1) + r;\r\n        y.divRemTo(d, y, z);\r\n    }\r\n    return z.intValue().toString(b) + r;\r\n}\r\n\r\n//(protected) convert from radix string\r\nfunction bnpFromRadix(s, b) {\r\n    this.fromInt(0);\r\n    if (b == null) b = 10;\r\n    var cs = this.chunkSize(b);\r\n    var d = Math.pow(b, cs), mi = false, j = 0, w = 0;\r\n    for (var i = 0; i < s.length; ++i) {\r\n        var x = intAt(s, i);\r\n        if (x < 0) {\r\n            if (s.charAt(i) == \"-\" && this.signum() === 0) mi = true;\r\n            continue;\r\n        }\r\n        w = b * w + x;\r\n        if (++j >= cs) {\r\n            this.dMultiply(d);\r\n            this.dAddOffset(w, 0);\r\n            j = 0;\r\n            w = 0;\r\n        }\r\n    }\r\n    if (j > 0) {\r\n        this.dMultiply(Math.pow(b, j));\r\n        this.dAddOffset(w, 0);\r\n    }\r\n    if (mi) BigInteger.ZERO.subTo(this, this);\r\n}\r\n\r\n//(protected) alternate constructor\r\nfunction bnpFromNumber(a, b) {\r\n    if (\"number\" == typeof b) {\r\n        // new BigInteger(int,int,RNG)\r\n        if (a < 2) this.fromInt(1);\r\n        else {\r\n            this.fromNumber(a);\r\n            if (!this.testBit(a - 1))\t// force MSB set\r\n                this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\r\n            if (this.isEven()) this.dAddOffset(1, 0); // force odd\r\n            while (!this.isProbablePrime(b)) {\r\n                this.dAddOffset(2, 0);\r\n                if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\r\n            }\r\n        }\r\n    } else {\r\n        // new BigInteger(int,RNG)\r\n        var x = crypt.randomBytes((a >> 3) + 1)\r\n        var t = a & 7;\r\n\r\n        if (t > 0)\r\n            x[0] &= ((1 << t) - 1);\r\n        else\r\n            x[0] = 0;\r\n\r\n        this.fromByteArray(x);\r\n    }\r\n}\r\n\r\n//(public) convert to bigendian byte array\r\nfunction bnToByteArray() {\r\n    var i = this.t, r = new Array();\r\n    r[0] = this.s;\r\n    var p = this.DB - (i * this.DB) % 8, d, k = 0;\r\n    if (i-- > 0) {\r\n        if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p)\r\n            r[k++] = d | (this.s << (this.DB - p));\r\n        while (i >= 0) {\r\n            if (p < 8) {\r\n                d = (this[i] & ((1 << p) - 1)) << (8 - p);\r\n                d |= this[--i] >> (p += this.DB - 8);\r\n            }\r\n            else {\r\n                d = (this[i] >> (p -= 8)) & 0xff;\r\n                if (p <= 0) {\r\n                    p += this.DB;\r\n                    --i;\r\n                }\r\n            }\r\n            if ((d & 0x80) != 0) d |= -256;\r\n            if (k === 0 && (this.s & 0x80) != (d & 0x80)) ++k;\r\n            if (k > 0 || d != this.s) r[k++] = d;\r\n        }\r\n    }\r\n    return r;\r\n}\r\n\r\n/**\r\n * return Buffer object\r\n * @param trim {boolean} slice buffer if first element == 0\r\n * @returns {Buffer}\r\n */\r\nfunction bnToBuffer(trimOrSize) {\r\n    var res = Buffer.from(this.toByteArray());\r\n    if (trimOrSize === true && res[0] === 0) {\r\n        res = res.slice(1);\r\n    } else if (_.isNumber(trimOrSize)) {\r\n        if (res.length > trimOrSize) {\r\n            for (var i = 0; i < res.length - trimOrSize; i++) {\r\n                if (res[i] !== 0) {\r\n                    return null;\r\n                }\r\n            }\r\n            return res.slice(res.length - trimOrSize);\r\n        } else if (res.length < trimOrSize) {\r\n            var padded = Buffer.alloc(trimOrSize);\r\n            padded.fill(0, 0, trimOrSize - res.length);\r\n            res.copy(padded, trimOrSize - res.length);\r\n            return padded;\r\n        }\r\n    }\r\n    return res;\r\n}\r\n\r\nfunction bnEquals(a) {\r\n    return (this.compareTo(a) == 0);\r\n}\r\nfunction bnMin(a) {\r\n    return (this.compareTo(a) < 0) ? this : a;\r\n}\r\nfunction bnMax(a) {\r\n    return (this.compareTo(a) > 0) ? this : a;\r\n}\r\n\r\n//(protected) r = this op a (bitwise)\r\nfunction bnpBitwiseTo(a, op, r) {\r\n    var i, f, m = Math.min(a.t, this.t);\r\n    for (i = 0; i < m; ++i) r[i] = op(this[i], a[i]);\r\n    if (a.t < this.t) {\r\n        f = a.s & this.DM;\r\n        for (i = m; i < this.t; ++i) r[i] = op(this[i], f);\r\n        r.t = this.t;\r\n    }\r\n    else {\r\n        f = this.s & this.DM;\r\n        for (i = m; i < a.t; ++i) r[i] = op(f, a[i]);\r\n        r.t = a.t;\r\n    }\r\n    r.s = op(this.s, a.s);\r\n    r.clamp();\r\n}\r\n\r\n//(public) this & a\r\nfunction op_and(x, y) {\r\n    return x & y;\r\n}\r\nfunction bnAnd(a) {\r\n    var r = nbi();\r\n    this.bitwiseTo(a, op_and, r);\r\n    return r;\r\n}\r\n\r\n//(public) this | a\r\nfunction op_or(x, y) {\r\n    return x | y;\r\n}\r\nfunction bnOr(a) {\r\n    var r = nbi();\r\n    this.bitwiseTo(a, op_or, r);\r\n    return r;\r\n}\r\n\r\n//(public) this ^ a\r\nfunction op_xor(x, y) {\r\n    return x ^ y;\r\n}\r\nfunction bnXor(a) {\r\n    var r = nbi();\r\n    this.bitwiseTo(a, op_xor, r);\r\n    return r;\r\n}\r\n\r\n//(public) this & ~a\r\nfunction op_andnot(x, y) {\r\n    return x & ~y;\r\n}\r\nfunction bnAndNot(a) {\r\n    var r = nbi();\r\n    this.bitwiseTo(a, op_andnot, r);\r\n    return r;\r\n}\r\n\r\n//(public) ~this\r\nfunction bnNot() {\r\n    var r = nbi();\r\n    for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i];\r\n    r.t = this.t;\r\n    r.s = ~this.s;\r\n    return r;\r\n}\r\n\r\n//(public) this << n\r\nfunction bnShiftLeft(n) {\r\n    var r = nbi();\r\n    if (n < 0) this.rShiftTo(-n, r); else this.lShiftTo(n, r);\r\n    return r;\r\n}\r\n\r\n//(public) this >> n\r\nfunction bnShiftRight(n) {\r\n    var r = nbi();\r\n    if (n < 0) this.lShiftTo(-n, r); else this.rShiftTo(n, r);\r\n    return r;\r\n}\r\n\r\n//return index of lowest 1-bit in x, x < 2^31\r\nfunction lbit(x) {\r\n    if (x === 0) return -1;\r\n    var r = 0;\r\n    if ((x & 0xffff) === 0) {\r\n        x >>= 16;\r\n        r += 16;\r\n    }\r\n    if ((x & 0xff) === 0) {\r\n        x >>= 8;\r\n        r += 8;\r\n    }\r\n    if ((x & 0xf) === 0) {\r\n        x >>= 4;\r\n        r += 4;\r\n    }\r\n    if ((x & 3) === 0) {\r\n        x >>= 2;\r\n        r += 2;\r\n    }\r\n    if ((x & 1) === 0) ++r;\r\n    return r;\r\n}\r\n\r\n//(public) returns index of lowest 1-bit (or -1 if none)\r\nfunction bnGetLowestSetBit() {\r\n    for (var i = 0; i < this.t; ++i)\r\n        if (this[i] != 0) return i * this.DB + lbit(this[i]);\r\n    if (this.s < 0) return this.t * this.DB;\r\n    return -1;\r\n}\r\n\r\n//return number of 1 bits in x\r\nfunction cbit(x) {\r\n    var r = 0;\r\n    while (x != 0) {\r\n        x &= x - 1;\r\n        ++r;\r\n    }\r\n    return r;\r\n}\r\n\r\n//(public) return number of set bits\r\nfunction bnBitCount() {\r\n    var r = 0, x = this.s & this.DM;\r\n    for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x);\r\n    return r;\r\n}\r\n\r\n//(public) true iff nth bit is set\r\nfunction bnTestBit(n) {\r\n    var j = Math.floor(n / this.DB);\r\n    if (j >= this.t) return (this.s != 0);\r\n    return ((this[j] & (1 << (n % this.DB))) != 0);\r\n}\r\n\r\n//(protected) this op (1<<n)\r\nfunction bnpChangeBit(n, op) {\r\n    var r = BigInteger.ONE.shiftLeft(n);\r\n    this.bitwiseTo(r, op, r);\r\n    return r;\r\n}\r\n\r\n//(public) this | (1<<n)\r\nfunction bnSetBit(n) {\r\n    return this.changeBit(n, op_or);\r\n}\r\n\r\n//(public) this & ~(1<<n)\r\nfunction bnClearBit(n) {\r\n    return this.changeBit(n, op_andnot);\r\n}\r\n\r\n//(public) this ^ (1<<n)\r\nfunction bnFlipBit(n) {\r\n    return this.changeBit(n, op_xor);\r\n}\r\n\r\n//(protected) r = this + a\r\nfunction bnpAddTo(a, r) {\r\n    var i = 0, c = 0, m = Math.min(a.t, this.t);\r\n    while (i < m) {\r\n        c += this[i] + a[i];\r\n        r[i++] = c & this.DM;\r\n        c >>= this.DB;\r\n    }\r\n    if (a.t < this.t) {\r\n        c += a.s;\r\n        while (i < this.t) {\r\n            c += this[i];\r\n            r[i++] = c & this.DM;\r\n            c >>= this.DB;\r\n        }\r\n        c += this.s;\r\n    }\r\n    else {\r\n        c += this.s;\r\n        while (i < a.t) {\r\n            c += a[i];\r\n            r[i++] = c & this.DM;\r\n            c >>= this.DB;\r\n        }\r\n        c += a.s;\r\n    }\r\n    r.s = (c < 0) ? -1 : 0;\r\n    if (c > 0) r[i++] = c;\r\n    else if (c < -1) r[i++] = this.DV + c;\r\n    r.t = i;\r\n    r.clamp();\r\n}\r\n\r\n//(public) this + a\r\nfunction bnAdd(a) {\r\n    var r = nbi();\r\n    this.addTo(a, r);\r\n    return r;\r\n}\r\n\r\n//(public) this - a\r\nfunction bnSubtract(a) {\r\n    var r = nbi();\r\n    this.subTo(a, r);\r\n    return r;\r\n}\r\n\r\n//(public) this * a\r\nfunction bnMultiply(a) {\r\n    var r = nbi();\r\n    this.multiplyTo(a, r);\r\n    return r;\r\n}\r\n\r\n// (public) this^2\r\nfunction bnSquare() {\r\n    var r = nbi();\r\n    this.squareTo(r);\r\n    return r;\r\n}\r\n\r\n//(public) this / a\r\nfunction bnDivide(a) {\r\n    var r = nbi();\r\n    this.divRemTo(a, r, null);\r\n    return r;\r\n}\r\n\r\n//(public) this % a\r\nfunction bnRemainder(a) {\r\n    var r = nbi();\r\n    this.divRemTo(a, null, r);\r\n    return r;\r\n}\r\n\r\n//(public) [this/a,this%a]\r\nfunction bnDivideAndRemainder(a) {\r\n    var q = nbi(), r = nbi();\r\n    this.divRemTo(a, q, r);\r\n    return new Array(q, r);\r\n}\r\n\r\n//(protected) this *= n, this >= 0, 1 < n < DV\r\nfunction bnpDMultiply(n) {\r\n    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\r\n    ++this.t;\r\n    this.clamp();\r\n}\r\n\r\n//(protected) this += n << w words, this >= 0\r\nfunction bnpDAddOffset(n, w) {\r\n    if (n === 0) return;\r\n    while (this.t <= w) this[this.t++] = 0;\r\n    this[w] += n;\r\n    while (this[w] >= this.DV) {\r\n        this[w] -= this.DV;\r\n        if (++w >= this.t) this[this.t++] = 0;\r\n        ++this[w];\r\n    }\r\n}\r\n\r\n//A \"null\" reducer\r\nfunction NullExp() {\r\n}\r\nfunction nNop(x) {\r\n    return x;\r\n}\r\nfunction nMulTo(x, y, r) {\r\n    x.multiplyTo(y, r);\r\n}\r\nfunction nSqrTo(x, r) {\r\n    x.squareTo(r);\r\n}\r\n\r\nNullExp.prototype.convert = nNop;\r\nNullExp.prototype.revert = nNop;\r\nNullExp.prototype.mulTo = nMulTo;\r\nNullExp.prototype.sqrTo = nSqrTo;\r\n\r\n//(public) this^e\r\nfunction bnPow(e) {\r\n    return this.exp(e, new NullExp());\r\n}\r\n\r\n//(protected) r = lower n words of \"this * a\", a.t <= n\r\n//\"this\" should be the larger one if appropriate.\r\nfunction bnpMultiplyLowerTo(a, n, r) {\r\n    var i = Math.min(this.t + a.t, n);\r\n    r.s = 0; // assumes a,this >= 0\r\n    r.t = i;\r\n    while (i > 0) r[--i] = 0;\r\n    var j;\r\n    for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\r\n    for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i);\r\n    r.clamp();\r\n}\r\n\r\n//(protected) r = \"this * a\" without lower n words, n > 0\r\n//\"this\" should be the larger one if appropriate.\r\nfunction bnpMultiplyUpperTo(a, n, r) {\r\n    --n;\r\n    var i = r.t = this.t + a.t - n;\r\n    r.s = 0; // assumes a,this >= 0\r\n    while (--i >= 0) r[i] = 0;\r\n    for (i = Math.max(n - this.t, 0); i < a.t; ++i)\r\n        r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\r\n    r.clamp();\r\n    r.drShiftTo(1, r);\r\n}\r\n\r\n//Barrett modular reduction\r\nfunction Barrett(m) {\r\n// setup Barrett\r\n    this.r2 = nbi();\r\n    this.q3 = nbi();\r\n    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\r\n    this.mu = this.r2.divide(m);\r\n    this.m = m;\r\n}\r\n\r\nfunction barrettConvert(x) {\r\n    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);\r\n    else if (x.compareTo(this.m) < 0) return x;\r\n    else {\r\n        var r = nbi();\r\n        x.copyTo(r);\r\n        this.reduce(r);\r\n        return r;\r\n    }\r\n}\r\n\r\nfunction barrettRevert(x) {\r\n    return x;\r\n}\r\n\r\n//x = x mod m (HAC 14.42)\r\nfunction barrettReduce(x) {\r\n    x.drShiftTo(this.m.t - 1, this.r2);\r\n    if (x.t > this.m.t + 1) {\r\n        x.t = this.m.t + 1;\r\n        x.clamp();\r\n    }\r\n    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\r\n    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\r\n    while (x.compareTo(this.r2) < 0) x.dAddOffset(1, this.m.t + 1);\r\n    x.subTo(this.r2, x);\r\n    while (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\r\n}\r\n\r\n//r = x^2 mod m; x != r\r\nfunction barrettSqrTo(x, r) {\r\n    x.squareTo(r);\r\n    this.reduce(r);\r\n}\r\n\r\n//r = x*y mod m; x,y != r\r\nfunction barrettMulTo(x, y, r) {\r\n    x.multiplyTo(y, r);\r\n    this.reduce(r);\r\n}\r\n\r\nBarrett.prototype.convert = barrettConvert;\r\nBarrett.prototype.revert = barrettRevert;\r\nBarrett.prototype.reduce = barrettReduce;\r\nBarrett.prototype.mulTo = barrettMulTo;\r\nBarrett.prototype.sqrTo = barrettSqrTo;\r\n\r\n//(public) this^e % m (HAC 14.85)\r\nfunction bnModPow(e, m) {\r\n    var i = e.bitLength(), k, r = nbv(1), z;\r\n    if (i <= 0) return r;\r\n    else if (i < 18) k = 1;\r\n    else if (i < 48) k = 3;\r\n    else if (i < 144) k = 4;\r\n    else if (i < 768) k = 5;\r\n    else k = 6;\r\n    if (i < 8)\r\n        z = new Classic(m);\r\n    else if (m.isEven())\r\n        z = new Barrett(m);\r\n    else\r\n        z = new Montgomery(m);\r\n\r\n// precomputation\r\n    var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;\r\n    g[1] = z.convert(this);\r\n    if (k > 1) {\r\n        var g2 = nbi();\r\n        z.sqrTo(g[1], g2);\r\n        while (n <= km) {\r\n            g[n] = nbi();\r\n            z.mulTo(g2, g[n - 2], g[n]);\r\n            n += 2;\r\n        }\r\n    }\r\n\r\n    var j = e.t - 1, w, is1 = true, r2 = nbi(), t;\r\n    i = nbits(e[j]) - 1;\r\n    while (j >= 0) {\r\n        if (i >= k1) w = (e[j] >> (i - k1)) & km;\r\n        else {\r\n            w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i);\r\n            if (j > 0) w |= e[j - 1] >> (this.DB + i - k1);\r\n        }\r\n\r\n        n = k;\r\n        while ((w & 1) === 0) {\r\n            w >>= 1;\r\n            --n;\r\n        }\r\n        if ((i -= n) < 0) {\r\n            i += this.DB;\r\n            --j;\r\n        }\r\n        if (is1) {\t// ret == 1, don't bother squaring or multiplying it\r\n            g[w].copyTo(r);\r\n            is1 = false;\r\n        }\r\n        else {\r\n            while (n > 1) {\r\n                z.sqrTo(r, r2);\r\n                z.sqrTo(r2, r);\r\n                n -= 2;\r\n            }\r\n            if (n > 0) z.sqrTo(r, r2); else {\r\n                t = r;\r\n                r = r2;\r\n                r2 = t;\r\n            }\r\n            z.mulTo(r2, g[w], r);\r\n        }\r\n\r\n        while (j >= 0 && (e[j] & (1 << i)) === 0) {\r\n            z.sqrTo(r, r2);\r\n            t = r;\r\n            r = r2;\r\n            r2 = t;\r\n            if (--i < 0) {\r\n                i = this.DB - 1;\r\n                --j;\r\n            }\r\n        }\r\n    }\r\n    return z.revert(r);\r\n}\r\n\r\n//(public) gcd(this,a) (HAC 14.54)\r\nfunction bnGCD(a) {\r\n    var x = (this.s < 0) ? this.negate() : this.clone();\r\n    var y = (a.s < 0) ? a.negate() : a.clone();\r\n    if (x.compareTo(y) < 0) {\r\n        var t = x;\r\n        x = y;\r\n        y = t;\r\n    }\r\n    var i = x.getLowestSetBit(), g = y.getLowestSetBit();\r\n    if (g < 0) return x;\r\n    if (i < g) g = i;\r\n    if (g > 0) {\r\n        x.rShiftTo(g, x);\r\n        y.rShiftTo(g, y);\r\n    }\r\n    while (x.signum() > 0) {\r\n        if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\r\n        if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\r\n        if (x.compareTo(y) >= 0) {\r\n            x.subTo(y, x);\r\n            x.rShiftTo(1, x);\r\n        }\r\n        else {\r\n            y.subTo(x, y);\r\n            y.rShiftTo(1, y);\r\n        }\r\n    }\r\n    if (g > 0) y.lShiftTo(g, y);\r\n    return y;\r\n}\r\n\r\n//(protected) this % n, n < 2^26\r\nfunction bnpModInt(n) {\r\n    if (n <= 0) return 0;\r\n    var d = this.DV % n, r = (this.s < 0) ? n - 1 : 0;\r\n    if (this.t > 0)\r\n        if (d === 0) r = this[0] % n;\r\n        else for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n;\r\n    return r;\r\n}\r\n\r\n//(public) 1/this % m (HAC 14.61)\r\nfunction bnModInverse(m) {\r\n    var ac = m.isEven();\r\n    if ((this.isEven() && ac) || m.signum() === 0) return BigInteger.ZERO;\r\n    var u = m.clone(), v = this.clone();\r\n    var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\r\n    while (u.signum() != 0) {\r\n        while (u.isEven()) {\r\n            u.rShiftTo(1, u);\r\n            if (ac) {\r\n                if (!a.isEven() || !b.isEven()) {\r\n                    a.addTo(this, a);\r\n                    b.subTo(m, b);\r\n                }\r\n                a.rShiftTo(1, a);\r\n            }\r\n            else if (!b.isEven()) b.subTo(m, b);\r\n            b.rShiftTo(1, b);\r\n        }\r\n        while (v.isEven()) {\r\n            v.rShiftTo(1, v);\r\n            if (ac) {\r\n                if (!c.isEven() || !d.isEven()) {\r\n                    c.addTo(this, c);\r\n                    d.subTo(m, d);\r\n                }\r\n                c.rShiftTo(1, c);\r\n            }\r\n            else if (!d.isEven()) d.subTo(m, d);\r\n            d.rShiftTo(1, d);\r\n        }\r\n        if (u.compareTo(v) >= 0) {\r\n            u.subTo(v, u);\r\n            if (ac) a.subTo(c, a);\r\n            b.subTo(d, b);\r\n        }\r\n        else {\r\n            v.subTo(u, v);\r\n            if (ac) c.subTo(a, c);\r\n            d.subTo(b, d);\r\n        }\r\n    }\r\n    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\r\n    if (d.compareTo(m) >= 0) return d.subtract(m);\r\n    if (d.signum() < 0) d.addTo(m, d); else return d;\r\n    if (d.signum() < 0) return d.add(m); else return d;\r\n}\r\n\r\nvar lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\r\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\r\n\r\n//(public) test primality with certainty >= 1-.5^t\r\nfunction bnIsProbablePrime(t) {\r\n    var i, x = this.abs();\r\n    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\r\n        for (i = 0; i < lowprimes.length; ++i)\r\n            if (x[0] == lowprimes[i]) return true;\r\n        return false;\r\n    }\r\n    if (x.isEven()) return false;\r\n    i = 1;\r\n    while (i < lowprimes.length) {\r\n        var m = lowprimes[i], j = i + 1;\r\n        while (j < lowprimes.length && m < lplim) m *= lowprimes[j++];\r\n        m = x.modInt(m);\r\n        while (i < j) if (m % lowprimes[i++] === 0) return false;\r\n    }\r\n    return x.millerRabin(t);\r\n}\r\n\r\n//(protected) true if probably prime (HAC 4.24, Miller-Rabin)\r\nfunction bnpMillerRabin(t) {\r\n    var n1 = this.subtract(BigInteger.ONE);\r\n    var k = n1.getLowestSetBit();\r\n    if (k <= 0) return false;\r\n    var r = n1.shiftRight(k);\r\n    t = (t + 1) >> 1;\r\n    if (t > lowprimes.length) t = lowprimes.length;\r\n    var a = nbi();\r\n    for (var i = 0; i < t; ++i) {\r\n        //Pick bases at random, instead of starting at 2\r\n        a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\r\n        var y = a.modPow(r, this);\r\n        if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\r\n            var j = 1;\r\n            while (j++ < k && y.compareTo(n1) != 0) {\r\n                y = y.modPowInt(2, this);\r\n                if (y.compareTo(BigInteger.ONE) === 0) return false;\r\n            }\r\n            if (y.compareTo(n1) != 0) return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n// protected\r\nBigInteger.prototype.copyTo = bnpCopyTo;\r\nBigInteger.prototype.fromInt = bnpFromInt;\r\nBigInteger.prototype.fromString = bnpFromString;\r\nBigInteger.prototype.fromByteArray = bnpFromByteArray;\r\nBigInteger.prototype.fromBuffer = bnpFromBuffer;\r\nBigInteger.prototype.clamp = bnpClamp;\r\nBigInteger.prototype.dlShiftTo = bnpDLShiftTo;\r\nBigInteger.prototype.drShiftTo = bnpDRShiftTo;\r\nBigInteger.prototype.lShiftTo = bnpLShiftTo;\r\nBigInteger.prototype.rShiftTo = bnpRShiftTo;\r\nBigInteger.prototype.subTo = bnpSubTo;\r\nBigInteger.prototype.multiplyTo = bnpMultiplyTo;\r\nBigInteger.prototype.squareTo = bnpSquareTo;\r\nBigInteger.prototype.divRemTo = bnpDivRemTo;\r\nBigInteger.prototype.invDigit = bnpInvDigit;\r\nBigInteger.prototype.isEven = bnpIsEven;\r\nBigInteger.prototype.exp = bnpExp;\r\n\r\nBigInteger.prototype.chunkSize = bnpChunkSize;\r\nBigInteger.prototype.toRadix = bnpToRadix;\r\nBigInteger.prototype.fromRadix = bnpFromRadix;\r\nBigInteger.prototype.fromNumber = bnpFromNumber;\r\nBigInteger.prototype.bitwiseTo = bnpBitwiseTo;\r\nBigInteger.prototype.changeBit = bnpChangeBit;\r\nBigInteger.prototype.addTo = bnpAddTo;\r\nBigInteger.prototype.dMultiply = bnpDMultiply;\r\nBigInteger.prototype.dAddOffset = bnpDAddOffset;\r\nBigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\r\nBigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\r\nBigInteger.prototype.modInt = bnpModInt;\r\nBigInteger.prototype.millerRabin = bnpMillerRabin;\r\n\r\n\r\n// public\r\nBigInteger.prototype.toString = bnToString;\r\nBigInteger.prototype.negate = bnNegate;\r\nBigInteger.prototype.abs = bnAbs;\r\nBigInteger.prototype.compareTo = bnCompareTo;\r\nBigInteger.prototype.bitLength = bnBitLength;\r\nBigInteger.prototype.mod = bnMod;\r\nBigInteger.prototype.modPowInt = bnModPowInt;\r\n\r\nBigInteger.prototype.clone = bnClone;\r\nBigInteger.prototype.intValue = bnIntValue;\r\nBigInteger.prototype.byteValue = bnByteValue;\r\nBigInteger.prototype.shortValue = bnShortValue;\r\nBigInteger.prototype.signum = bnSigNum;\r\nBigInteger.prototype.toByteArray = bnToByteArray;\r\nBigInteger.prototype.toBuffer = bnToBuffer;\r\nBigInteger.prototype.equals = bnEquals;\r\nBigInteger.prototype.min = bnMin;\r\nBigInteger.prototype.max = bnMax;\r\nBigInteger.prototype.and = bnAnd;\r\nBigInteger.prototype.or = bnOr;\r\nBigInteger.prototype.xor = bnXor;\r\nBigInteger.prototype.andNot = bnAndNot;\r\nBigInteger.prototype.not = bnNot;\r\nBigInteger.prototype.shiftLeft = bnShiftLeft;\r\nBigInteger.prototype.shiftRight = bnShiftRight;\r\nBigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\r\nBigInteger.prototype.bitCount = bnBitCount;\r\nBigInteger.prototype.testBit = bnTestBit;\r\nBigInteger.prototype.setBit = bnSetBit;\r\nBigInteger.prototype.clearBit = bnClearBit;\r\nBigInteger.prototype.flipBit = bnFlipBit;\r\nBigInteger.prototype.add = bnAdd;\r\nBigInteger.prototype.subtract = bnSubtract;\r\nBigInteger.prototype.multiply = bnMultiply;\r\nBigInteger.prototype.divide = bnDivide;\r\nBigInteger.prototype.remainder = bnRemainder;\r\nBigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\r\nBigInteger.prototype.modPow = bnModPow;\r\nBigInteger.prototype.modInverse = bnModInverse;\r\nBigInteger.prototype.pow = bnPow;\r\nBigInteger.prototype.gcd = bnGCD;\r\nBigInteger.prototype.isProbablePrime = bnIsProbablePrime;\r\nBigInteger.int2char = int2char;\r\n\r\n// \"constants\"\r\nBigInteger.ZERO = nbv(0);\r\nBigInteger.ONE = nbv(1);\r\n\r\n// JSBN-specific extension\r\nBigInteger.prototype.square = bnSquare;\r\n\r\n//BigInteger interfaces not implemented in jsbn:\r\n\r\n//BigInteger(int signum, byte[] magnitude)\r\n//double doubleValue()\r\n//float floatValue()\r\n//int hashCode()\r\n//long longValue()\r\n//static BigInteger valueOf(long val)\r\n\r\nmodule.exports = BigInteger;"]},"metadata":{},"sourceType":"script"}