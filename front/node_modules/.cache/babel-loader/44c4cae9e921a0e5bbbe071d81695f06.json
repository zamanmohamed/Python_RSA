{"ast":null,"code":"var crypto = require('crypto');\n\nvar constants = require('constants');\n\nvar schemes = require('../schemes/schemes.js');\n\nmodule.exports = function (keyPair, options) {\n  var jsEngine = require('./js.js')(keyPair, options);\n\n  var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);\n  return {\n    encrypt: function (buffer, usePrivate) {\n      if (usePrivate) {\n        return jsEngine.encrypt(buffer, usePrivate);\n      }\n\n      var padding = constants.RSA_PKCS1_OAEP_PADDING;\n\n      if (options.encryptionScheme === 'pkcs1') {\n        padding = constants.RSA_PKCS1_PADDING;\n      }\n\n      if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n        padding = options.encryptionSchemeOptions.padding;\n      }\n\n      var data = buffer;\n\n      if (padding === constants.RSA_NO_PADDING) {\n        data = pkcs1Scheme.pkcs0pad(buffer);\n      }\n\n      return crypto.publicEncrypt({\n        key: options.rsaUtils.exportKey('public'),\n        padding: padding\n      }, data);\n    },\n    decrypt: function (buffer, usePublic) {\n      if (usePublic) {\n        return jsEngine.decrypt(buffer, usePublic);\n      }\n\n      var padding = constants.RSA_PKCS1_OAEP_PADDING;\n\n      if (options.encryptionScheme === 'pkcs1') {\n        padding = constants.RSA_PKCS1_PADDING;\n      }\n\n      if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n        padding = options.encryptionSchemeOptions.padding;\n      }\n\n      var res = crypto.privateDecrypt({\n        key: options.rsaUtils.exportKey('private'),\n        padding: padding\n      }, buffer);\n\n      if (padding === constants.RSA_NO_PADDING) {\n        return pkcs1Scheme.pkcs0unpad(res);\n      }\n\n      return res;\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Zaman/zaman/RSA/front/node_modules/node-rsa/src/encryptEngines/node12.js"],"names":["crypto","require","constants","schemes","module","exports","keyPair","options","jsEngine","pkcs1Scheme","pkcs1","makeScheme","encrypt","buffer","usePrivate","padding","RSA_PKCS1_OAEP_PADDING","encryptionScheme","RSA_PKCS1_PADDING","encryptionSchemeOptions","data","RSA_NO_PADDING","pkcs0pad","publicEncrypt","key","rsaUtils","exportKey","decrypt","usePublic","res","privateDecrypt","pkcs0unpad"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,uBAAD,CAArB;;AAEAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;AACzC,MAAIC,QAAQ,GAAGP,OAAO,CAAC,SAAD,CAAP,CAAmBK,OAAnB,EAA4BC,OAA5B,CAAf;;AACA,MAAIE,WAAW,GAAGN,OAAO,CAACO,KAAR,CAAcC,UAAd,CAAyBL,OAAzB,EAAkCC,OAAlC,CAAlB;AAEA,SAAO;AACHK,IAAAA,OAAO,EAAE,UAAUC,MAAV,EAAkBC,UAAlB,EAA8B;AACnC,UAAIA,UAAJ,EAAgB;AACZ,eAAON,QAAQ,CAACI,OAAT,CAAiBC,MAAjB,EAAyBC,UAAzB,CAAP;AACH;;AACD,UAAIC,OAAO,GAAGb,SAAS,CAACc,sBAAxB;;AACA,UAAIT,OAAO,CAACU,gBAAR,KAA6B,OAAjC,EAA0C;AACtCF,QAAAA,OAAO,GAAGb,SAAS,CAACgB,iBAApB;AACH;;AACD,UAAIX,OAAO,CAACY,uBAAR,IAAmCZ,OAAO,CAACY,uBAAR,CAAgCJ,OAAvE,EAAgF;AAC5EA,QAAAA,OAAO,GAAGR,OAAO,CAACY,uBAAR,CAAgCJ,OAA1C;AACH;;AAED,UAAIK,IAAI,GAAGP,MAAX;;AACA,UAAIE,OAAO,KAAKb,SAAS,CAACmB,cAA1B,EAA0C;AACtCD,QAAAA,IAAI,GAAGX,WAAW,CAACa,QAAZ,CAAqBT,MAArB,CAAP;AACH;;AAED,aAAOb,MAAM,CAACuB,aAAP,CAAqB;AACxBC,QAAAA,GAAG,EAAEjB,OAAO,CAACkB,QAAR,CAAiBC,SAAjB,CAA2B,QAA3B,CADmB;AAExBX,QAAAA,OAAO,EAAEA;AAFe,OAArB,EAGJK,IAHI,CAAP;AAIH,KAtBE;AAwBHO,IAAAA,OAAO,EAAE,UAAUd,MAAV,EAAkBe,SAAlB,EAA6B;AAClC,UAAIA,SAAJ,EAAe;AACX,eAAOpB,QAAQ,CAACmB,OAAT,CAAiBd,MAAjB,EAAyBe,SAAzB,CAAP;AACH;;AACD,UAAIb,OAAO,GAAGb,SAAS,CAACc,sBAAxB;;AACA,UAAIT,OAAO,CAACU,gBAAR,KAA6B,OAAjC,EAA0C;AACtCF,QAAAA,OAAO,GAAGb,SAAS,CAACgB,iBAApB;AACH;;AACD,UAAIX,OAAO,CAACY,uBAAR,IAAmCZ,OAAO,CAACY,uBAAR,CAAgCJ,OAAvE,EAAgF;AAC5EA,QAAAA,OAAO,GAAGR,OAAO,CAACY,uBAAR,CAAgCJ,OAA1C;AACH;;AAED,UAAIc,GAAG,GAAG7B,MAAM,CAAC8B,cAAP,CAAsB;AAC5BN,QAAAA,GAAG,EAAEjB,OAAO,CAACkB,QAAR,CAAiBC,SAAjB,CAA2B,SAA3B,CADuB;AAE5BX,QAAAA,OAAO,EAAEA;AAFmB,OAAtB,EAGPF,MAHO,CAAV;;AAKA,UAAIE,OAAO,KAAKb,SAAS,CAACmB,cAA1B,EAA0C;AACtC,eAAOZ,WAAW,CAACsB,UAAZ,CAAuBF,GAAvB,CAAP;AACH;;AACD,aAAOA,GAAP;AACH;AA7CE,GAAP;AA+CH,CAnDD","sourcesContent":["var crypto = require('crypto');\nvar constants = require('constants');\nvar schemes = require('../schemes/schemes.js');\n\nmodule.exports = function (keyPair, options) {\n    var jsEngine = require('./js.js')(keyPair, options);\n    var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);\n\n    return {\n        encrypt: function (buffer, usePrivate) {\n            if (usePrivate) {\n                return jsEngine.encrypt(buffer, usePrivate);\n            }\n            var padding = constants.RSA_PKCS1_OAEP_PADDING;\n            if (options.encryptionScheme === 'pkcs1') {\n                padding = constants.RSA_PKCS1_PADDING;\n            }\n            if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n                padding = options.encryptionSchemeOptions.padding;\n            }\n\n            var data = buffer;\n            if (padding === constants.RSA_NO_PADDING) {\n                data = pkcs1Scheme.pkcs0pad(buffer);\n            }\n\n            return crypto.publicEncrypt({\n                key: options.rsaUtils.exportKey('public'),\n                padding: padding\n            }, data);\n        },\n\n        decrypt: function (buffer, usePublic) {\n            if (usePublic) {\n                return jsEngine.decrypt(buffer, usePublic);\n            }\n            var padding = constants.RSA_PKCS1_OAEP_PADDING;\n            if (options.encryptionScheme === 'pkcs1') {\n                padding = constants.RSA_PKCS1_PADDING;\n            }\n            if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n                padding = options.encryptionSchemeOptions.padding;\n            }\n\n            var res = crypto.privateDecrypt({\n                key: options.rsaUtils.exportKey('private'),\n                padding: padding\n            }, buffer);\n\n            if (padding === constants.RSA_NO_PADDING) {\n                return pkcs1Scheme.pkcs0unpad(res);\n            }\n            return res;\n        }\n    };\n};"]},"metadata":{},"sourceType":"script"}